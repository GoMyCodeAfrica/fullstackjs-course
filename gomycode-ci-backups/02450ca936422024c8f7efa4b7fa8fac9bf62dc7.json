{
  "Lessons": [
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML Forms",
            "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 2,
                "Name": "Collecting data from the user",
                "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 6
              },
              {
                "LessonId": 2,
                "Name": "Form validation",
                "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 7
              },
              {
                "LessonId": 2,
                "Name": "Exercices: more landing pages",
                "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 8
              }
            ],
            "Progress": 0.0,
            "Id": 2
          },
          {
            "ModuleId": 1,
            "Name": "CSS",
            "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 3,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 9
              },
              {
                "LessonId": 3,
                "Name": "Attach CSS to your HTML files",
                "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 10
              },
              {
                "LessonId": 3,
                "Name": "Target HTML elements with CSS selectors",
                "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 11
              },
              {
                "LessonId": 3,
                "Name": "CSS properties",
                "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 12
              },
              {
                "LessonId": 3,
                "Name": "CSS values",
                "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 13
              },
              {
                "LessonId": 3,
                "Name": "Importing",
                "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 74
              },
              {
                "LessonId": 3,
                "Name": "Responsive design",
                "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 75
              }
            ],
            "Progress": 0.0,
            "Id": 3
          },
          {
            "ModuleId": 1,
            "Name": "Project: Personal portfolio",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 4,
                "Name": "Project: Personal portfolio",
                "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 14
              }
            ],
            "Progress": 0.0,
            "Id": 4
          },
          {
            "ModuleId": 1,
            "Name": "Javascript",
            "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 5,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 15
              }
            ],
            "Progress": 0.0,
            "Id": 5
          },
          {
            "ModuleId": 1,
            "Name": "Web dev basics",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 25,
                "Name": "Intro to programming",
                "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 76
              },
              {
                "LessonId": 25,
                "Name": "Intro to web development",
                "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 77
              }
            ],
            "Progress": 0.0,
            "Id": 25
          }
        ],
        "Id": 1
      },
      "Name": "HTML",
      "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "Slides": [
        {
          "LessonId": 1,
          "Name": "HTML the de facto language of the web",
          "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 1
        },
        {
          "LessonId": 1,
          "Name": "Choose your editor",
          "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 2
        },
        {
          "LessonId": 1,
          "Name": "Create HTML elements with tags",
          "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 3
        },
        {
          "LessonId": 1,
          "Name": "When tags can only do so much, use attributes",
          "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 4
        },
        {
          "LessonId": 1,
          "Name": "Exercices: recreating landing pages using HTML only",
          "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 5
        }
      ],
      "Progress": 0.0,
      "Id": 1
    },
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML",
            "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 1,
                "Name": "HTML the de facto language of the web",
                "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 1
              },
              {
                "LessonId": 1,
                "Name": "Choose your editor",
                "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 2
              },
              {
                "LessonId": 1,
                "Name": "Create HTML elements with tags",
                "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 3
              },
              {
                "LessonId": 1,
                "Name": "When tags can only do so much, use attributes",
                "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 4
              },
              {
                "LessonId": 1,
                "Name": "Exercices: recreating landing pages using HTML only",
                "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 5
              }
            ],
            "Progress": 0.0,
            "Id": 1
          },
          {
            "ModuleId": 1,
            "Name": "CSS",
            "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 3,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 9
              },
              {
                "LessonId": 3,
                "Name": "Attach CSS to your HTML files",
                "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 10
              },
              {
                "LessonId": 3,
                "Name": "Target HTML elements with CSS selectors",
                "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 11
              },
              {
                "LessonId": 3,
                "Name": "CSS properties",
                "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 12
              },
              {
                "LessonId": 3,
                "Name": "CSS values",
                "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 13
              },
              {
                "LessonId": 3,
                "Name": "Importing",
                "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 74
              },
              {
                "LessonId": 3,
                "Name": "Responsive design",
                "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 75
              }
            ],
            "Progress": 0.0,
            "Id": 3
          },
          {
            "ModuleId": 1,
            "Name": "Project: Personal portfolio",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 4,
                "Name": "Project: Personal portfolio",
                "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 14
              }
            ],
            "Progress": 0.0,
            "Id": 4
          },
          {
            "ModuleId": 1,
            "Name": "Javascript",
            "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 5,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 15
              }
            ],
            "Progress": 0.0,
            "Id": 5
          },
          {
            "ModuleId": 1,
            "Name": "Web dev basics",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 25,
                "Name": "Intro to programming",
                "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 76
              },
              {
                "LessonId": 25,
                "Name": "Intro to web development",
                "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 77
              }
            ],
            "Progress": 0.0,
            "Id": 25
          }
        ],
        "Id": 1
      },
      "Name": "HTML Forms",
      "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "Slides": [
        {
          "LessonId": 2,
          "Name": "Collecting data from the user",
          "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 6
        },
        {
          "LessonId": 2,
          "Name": "Form validation",
          "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 7
        },
        {
          "LessonId": 2,
          "Name": "Exercices: more landing pages",
          "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 8
        }
      ],
      "Progress": 0.0,
      "Id": 2
    },
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML",
            "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 1,
                "Name": "HTML the de facto language of the web",
                "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 1
              },
              {
                "LessonId": 1,
                "Name": "Choose your editor",
                "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 2
              },
              {
                "LessonId": 1,
                "Name": "Create HTML elements with tags",
                "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 3
              },
              {
                "LessonId": 1,
                "Name": "When tags can only do so much, use attributes",
                "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 4
              },
              {
                "LessonId": 1,
                "Name": "Exercices: recreating landing pages using HTML only",
                "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 5
              }
            ],
            "Progress": 0.0,
            "Id": 1
          },
          {
            "ModuleId": 1,
            "Name": "HTML Forms",
            "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 2,
                "Name": "Collecting data from the user",
                "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 6
              },
              {
                "LessonId": 2,
                "Name": "Form validation",
                "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 7
              },
              {
                "LessonId": 2,
                "Name": "Exercices: more landing pages",
                "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 8
              }
            ],
            "Progress": 0.0,
            "Id": 2
          },
          {
            "ModuleId": 1,
            "Name": "Project: Personal portfolio",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 4,
                "Name": "Project: Personal portfolio",
                "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 14
              }
            ],
            "Progress": 0.0,
            "Id": 4
          },
          {
            "ModuleId": 1,
            "Name": "Javascript",
            "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 5,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 15
              }
            ],
            "Progress": 0.0,
            "Id": 5
          },
          {
            "ModuleId": 1,
            "Name": "Web dev basics",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 25,
                "Name": "Intro to programming",
                "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 76
              },
              {
                "LessonId": 25,
                "Name": "Intro to web development",
                "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 77
              }
            ],
            "Progress": 0.0,
            "Id": 25
          }
        ],
        "Id": 1
      },
      "Name": "CSS",
      "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "Slides": [
        {
          "LessonId": 3,
          "Name": "CSS, the language of web design",
          "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 9
        },
        {
          "LessonId": 3,
          "Name": "Attach CSS to your HTML files",
          "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 10
        },
        {
          "LessonId": 3,
          "Name": "Target HTML elements with CSS selectors",
          "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "IsRead": null,
          "Id": 11
        },
        {
          "LessonId": 3,
          "Name": "CSS properties",
          "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "IsRead": null,
          "Id": 12
        },
        {
          "LessonId": 3,
          "Name": "CSS values",
          "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "IsRead": null,
          "Id": 13
        },
        {
          "LessonId": 3,
          "Name": "Importing",
          "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 15,
          "IsRead": null,
          "Id": 74
        },
        {
          "LessonId": 3,
          "Name": "Responsive design",
          "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 18,
          "IsRead": null,
          "Id": 75
        }
      ],
      "Progress": 0.0,
      "Id": 3
    },
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML",
            "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 1,
                "Name": "HTML the de facto language of the web",
                "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 1
              },
              {
                "LessonId": 1,
                "Name": "Choose your editor",
                "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 2
              },
              {
                "LessonId": 1,
                "Name": "Create HTML elements with tags",
                "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 3
              },
              {
                "LessonId": 1,
                "Name": "When tags can only do so much, use attributes",
                "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 4
              },
              {
                "LessonId": 1,
                "Name": "Exercices: recreating landing pages using HTML only",
                "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 5
              }
            ],
            "Progress": 0.0,
            "Id": 1
          },
          {
            "ModuleId": 1,
            "Name": "HTML Forms",
            "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 2,
                "Name": "Collecting data from the user",
                "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 6
              },
              {
                "LessonId": 2,
                "Name": "Form validation",
                "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 7
              },
              {
                "LessonId": 2,
                "Name": "Exercices: more landing pages",
                "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 8
              }
            ],
            "Progress": 0.0,
            "Id": 2
          },
          {
            "ModuleId": 1,
            "Name": "CSS",
            "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 3,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 9
              },
              {
                "LessonId": 3,
                "Name": "Attach CSS to your HTML files",
                "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 10
              },
              {
                "LessonId": 3,
                "Name": "Target HTML elements with CSS selectors",
                "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 11
              },
              {
                "LessonId": 3,
                "Name": "CSS properties",
                "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 12
              },
              {
                "LessonId": 3,
                "Name": "CSS values",
                "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 13
              },
              {
                "LessonId": 3,
                "Name": "Importing",
                "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 74
              },
              {
                "LessonId": 3,
                "Name": "Responsive design",
                "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 75
              }
            ],
            "Progress": 0.0,
            "Id": 3
          },
          {
            "ModuleId": 1,
            "Name": "Javascript",
            "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 5,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 15
              }
            ],
            "Progress": 0.0,
            "Id": 5
          },
          {
            "ModuleId": 1,
            "Name": "Web dev basics",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 25,
                "Name": "Intro to programming",
                "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 76
              },
              {
                "LessonId": 25,
                "Name": "Intro to web development",
                "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 77
              }
            ],
            "Progress": 0.0,
            "Id": 25
          }
        ],
        "Id": 1
      },
      "Name": "Project: Personal portfolio",
      "Content": "",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "Slides": [
        {
          "LessonId": 4,
          "Name": "Project: Personal portfolio",
          "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 14
        }
      ],
      "Progress": 0.0,
      "Id": 4
    },
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML",
            "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 1,
                "Name": "HTML the de facto language of the web",
                "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 1
              },
              {
                "LessonId": 1,
                "Name": "Choose your editor",
                "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 2
              },
              {
                "LessonId": 1,
                "Name": "Create HTML elements with tags",
                "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 3
              },
              {
                "LessonId": 1,
                "Name": "When tags can only do so much, use attributes",
                "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 4
              },
              {
                "LessonId": 1,
                "Name": "Exercices: recreating landing pages using HTML only",
                "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 5
              }
            ],
            "Progress": 0.0,
            "Id": 1
          },
          {
            "ModuleId": 1,
            "Name": "HTML Forms",
            "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 2,
                "Name": "Collecting data from the user",
                "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 6
              },
              {
                "LessonId": 2,
                "Name": "Form validation",
                "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 7
              },
              {
                "LessonId": 2,
                "Name": "Exercices: more landing pages",
                "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 8
              }
            ],
            "Progress": 0.0,
            "Id": 2
          },
          {
            "ModuleId": 1,
            "Name": "CSS",
            "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 3,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 9
              },
              {
                "LessonId": 3,
                "Name": "Attach CSS to your HTML files",
                "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 10
              },
              {
                "LessonId": 3,
                "Name": "Target HTML elements with CSS selectors",
                "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 11
              },
              {
                "LessonId": 3,
                "Name": "CSS properties",
                "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 12
              },
              {
                "LessonId": 3,
                "Name": "CSS values",
                "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 13
              },
              {
                "LessonId": 3,
                "Name": "Importing",
                "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 74
              },
              {
                "LessonId": 3,
                "Name": "Responsive design",
                "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 75
              }
            ],
            "Progress": 0.0,
            "Id": 3
          },
          {
            "ModuleId": 1,
            "Name": "Project: Personal portfolio",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 4,
                "Name": "Project: Personal portfolio",
                "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 14
              }
            ],
            "Progress": 0.0,
            "Id": 4
          },
          {
            "ModuleId": 1,
            "Name": "Web dev basics",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "Slides": [
              {
                "LessonId": 25,
                "Name": "Intro to programming",
                "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 76
              },
              {
                "LessonId": 25,
                "Name": "Intro to web development",
                "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 77
              }
            ],
            "Progress": 0.0,
            "Id": 25
          }
        ],
        "Id": 1
      },
      "Name": "Javascript",
      "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 15,
      "Slides": [
        {
          "LessonId": 5,
          "Name": "CSS, the language of web design",
          "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 15
        }
      ],
      "Progress": 0.0,
      "Id": 5
    },
    {
      "ModuleId": 1,
      "Module": {
        "SubTrackId": 13,
        "SubTrack": {
          "Level": 1,
          "TrackId": 5,
          "Track": null,
          "Name": "Main",
          "Modules": [
            {
              "SubTrackId": 13,
              "Name": "Power Up",
              "Color": "#2ecc71",
              "OrderIndicator": 3,
              "Lessons": [],
              "Id": 2
            },
            {
              "SubTrackId": 13,
              "Name": "Launch",
              "Color": "#3498db",
              "OrderIndicator": 6,
              "Lessons": [],
              "Id": 3
            }
          ],
          "MigrationVersion": 4,
          "ProductTemplateId": 19,
          "Locked": false,
          "Id": 13
        },
        "Name": "Kickstart",
        "Color": "#1abc9c",
        "OrderIndicator": 0,
        "Lessons": [
          {
            "ModuleId": 1,
            "Name": "HTML",
            "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "Slides": [
              {
                "LessonId": 1,
                "Name": "HTML the de facto language of the web",
                "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 1
              },
              {
                "LessonId": 1,
                "Name": "Choose your editor",
                "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 2
              },
              {
                "LessonId": 1,
                "Name": "Create HTML elements with tags",
                "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 3
              },
              {
                "LessonId": 1,
                "Name": "When tags can only do so much, use attributes",
                "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 4
              },
              {
                "LessonId": 1,
                "Name": "Exercices: recreating landing pages using HTML only",
                "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 5
              }
            ],
            "Progress": 0.0,
            "Id": 1
          },
          {
            "ModuleId": 1,
            "Name": "HTML Forms",
            "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "Slides": [
              {
                "LessonId": 2,
                "Name": "Collecting data from the user",
                "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 6
              },
              {
                "LessonId": 2,
                "Name": "Form validation",
                "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 7
              },
              {
                "LessonId": 2,
                "Name": "Exercices: more landing pages",
                "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 8
              }
            ],
            "Progress": 0.0,
            "Id": 2
          },
          {
            "ModuleId": 1,
            "Name": "CSS",
            "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "Slides": [
              {
                "LessonId": 3,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 9
              },
              {
                "LessonId": 3,
                "Name": "Attach CSS to your HTML files",
                "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "IsRead": null,
                "Id": 10
              },
              {
                "LessonId": 3,
                "Name": "Target HTML elements with CSS selectors",
                "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "IsRead": null,
                "Id": 11
              },
              {
                "LessonId": 3,
                "Name": "CSS properties",
                "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "IsRead": null,
                "Id": 12
              },
              {
                "LessonId": 3,
                "Name": "CSS values",
                "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "IsRead": null,
                "Id": 13
              },
              {
                "LessonId": 3,
                "Name": "Importing",
                "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "IsRead": null,
                "Id": 74
              },
              {
                "LessonId": 3,
                "Name": "Responsive design",
                "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 18,
                "IsRead": null,
                "Id": 75
              }
            ],
            "Progress": 0.0,
            "Id": 3
          },
          {
            "ModuleId": 1,
            "Name": "Project: Personal portfolio",
            "Content": "",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "Slides": [
              {
                "LessonId": 4,
                "Name": "Project: Personal portfolio",
                "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 14
              }
            ],
            "Progress": 0.0,
            "Id": 4
          },
          {
            "ModuleId": 1,
            "Name": "Javascript",
            "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "Slides": [
              {
                "LessonId": 5,
                "Name": "CSS, the language of web design",
                "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "IsRead": null,
                "Id": 15
              }
            ],
            "Progress": 0.0,
            "Id": 5
          }
        ],
        "Id": 1
      },
      "Name": "Web dev basics",
      "Content": "",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "Slides": [
        {
          "LessonId": 25,
          "Name": "Intro to programming",
          "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "IsRead": null,
          "Id": 76
        },
        {
          "LessonId": 25,
          "Name": "Intro to web development",
          "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "IsRead": null,
          "Id": 77
        }
      ],
      "Progress": 0.0,
      "Id": 25
    }
  ],
  "Slides": [
    {
      "LessonId": 1,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML",
        "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 1,
            "Name": "Choose your editor",
            "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 2
          },
          {
            "LessonId": 1,
            "Name": "Create HTML elements with tags",
            "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 3
          },
          {
            "LessonId": 1,
            "Name": "When tags can only do so much, use attributes",
            "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 4
          },
          {
            "LessonId": 1,
            "Name": "Exercices: recreating landing pages using HTML only",
            "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 5
          }
        ],
        "Progress": 0.0,
        "Id": 1
      },
      "Name": "HTML the de facto language of the web",
      "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 1
    },
    {
      "LessonId": 1,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML",
        "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 1,
            "Name": "HTML the de facto language of the web",
            "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 1
          },
          {
            "LessonId": 1,
            "Name": "Create HTML elements with tags",
            "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 3
          },
          {
            "LessonId": 1,
            "Name": "When tags can only do so much, use attributes",
            "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 4
          },
          {
            "LessonId": 1,
            "Name": "Exercices: recreating landing pages using HTML only",
            "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 5
          }
        ],
        "Progress": 0.0,
        "Id": 1
      },
      "Name": "Choose your editor",
      "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 2
    },
    {
      "LessonId": 1,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML",
        "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 1,
            "Name": "HTML the de facto language of the web",
            "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 1
          },
          {
            "LessonId": 1,
            "Name": "Choose your editor",
            "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 2
          },
          {
            "LessonId": 1,
            "Name": "When tags can only do so much, use attributes",
            "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 4
          },
          {
            "LessonId": 1,
            "Name": "Exercices: recreating landing pages using HTML only",
            "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 5
          }
        ],
        "Progress": 0.0,
        "Id": 1
      },
      "Name": "Create HTML elements with tags",
      "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 3
    },
    {
      "LessonId": 1,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML",
        "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 1,
            "Name": "HTML the de facto language of the web",
            "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 1
          },
          {
            "LessonId": 1,
            "Name": "Choose your editor",
            "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 2
          },
          {
            "LessonId": 1,
            "Name": "Create HTML elements with tags",
            "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 3
          },
          {
            "LessonId": 1,
            "Name": "Exercices: recreating landing pages using HTML only",
            "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 5
          }
        ],
        "Progress": 0.0,
        "Id": 1
      },
      "Name": "When tags can only do so much, use attributes",
      "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 4
    },
    {
      "LessonId": 1,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML",
        "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 0,
        "Slides": [
          {
            "LessonId": 1,
            "Name": "HTML the de facto language of the web",
            "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 1
          },
          {
            "LessonId": 1,
            "Name": "Choose your editor",
            "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 2
          },
          {
            "LessonId": 1,
            "Name": "Create HTML elements with tags",
            "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 3
          },
          {
            "LessonId": 1,
            "Name": "When tags can only do so much, use attributes",
            "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 4
          }
        ],
        "Progress": 0.0,
        "Id": 1
      },
      "Name": "Exercices: recreating landing pages using HTML only",
      "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 5
    },
    {
      "LessonId": 2,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML Forms",
        "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 2,
            "Name": "Form validation",
            "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 7
          },
          {
            "LessonId": 2,
            "Name": "Exercices: more landing pages",
            "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 8
          }
        ],
        "Progress": 0.0,
        "Id": 2
      },
      "Name": "Collecting data from the user",
      "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 6
    },
    {
      "LessonId": 2,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML Forms",
        "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 2,
            "Name": "Collecting data from the user",
            "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 6
          },
          {
            "LessonId": 2,
            "Name": "Exercices: more landing pages",
            "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 8
          }
        ],
        "Progress": 0.0,
        "Id": 2
      },
      "Name": "Form validation",
      "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 7
    },
    {
      "LessonId": 2,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "HTML Forms",
        "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 3,
        "Slides": [
          {
            "LessonId": 2,
            "Name": "Collecting data from the user",
            "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 6
          },
          {
            "LessonId": 2,
            "Name": "Form validation",
            "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 7
          }
        ],
        "Progress": 0.0,
        "Id": 2
      },
      "Name": "Exercices: more landing pages",
      "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 8
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "CSS, the language of web design",
      "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 9
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "Attach CSS to your HTML files",
      "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 10
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "Target HTML elements with CSS selectors",
      "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 6,
      "IsRead": null,
      "Id": 11
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "CSS properties",
      "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 9,
      "IsRead": null,
      "Id": 12
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "CSS values",
      "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 12,
      "IsRead": null,
      "Id": 13
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Responsive design",
            "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 18,
            "IsRead": null,
            "Id": 75
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "Importing",
      "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 15,
      "IsRead": null,
      "Id": 74
    },
    {
      "LessonId": 3,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "CSS",
        "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 6,
        "Slides": [
          {
            "LessonId": 3,
            "Name": "CSS, the language of web design",
            "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 9
          },
          {
            "LessonId": 3,
            "Name": "Attach CSS to your HTML files",
            "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 10
          },
          {
            "LessonId": 3,
            "Name": "Target HTML elements with CSS selectors",
            "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 6,
            "IsRead": null,
            "Id": 11
          },
          {
            "LessonId": 3,
            "Name": "CSS properties",
            "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 9,
            "IsRead": null,
            "Id": 12
          },
          {
            "LessonId": 3,
            "Name": "CSS values",
            "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 12,
            "IsRead": null,
            "Id": 13
          },
          {
            "LessonId": 3,
            "Name": "Importing",
            "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 15,
            "IsRead": null,
            "Id": 74
          }
        ],
        "Progress": 0.0,
        "Id": 3
      },
      "Name": "Responsive design",
      "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 18,
      "IsRead": null,
      "Id": 75
    },
    {
      "LessonId": 4,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "Project: Personal portfolio",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 9,
        "Slides": [],
        "Progress": 0.0,
        "Id": 4
      },
      "Name": "Project: Personal portfolio",
      "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 14
    },
    {
      "LessonId": 5,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Web dev basics",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "Slides": [
                {
                  "LessonId": 25,
                  "Name": "Intro to programming",
                  "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 76
                },
                {
                  "LessonId": 25,
                  "Name": "Intro to web development",
                  "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 77
                }
              ],
              "Progress": 0.0,
              "Id": 25
            }
          ],
          "Id": 1
        },
        "Name": "Javascript",
        "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
        "SandboxUrl": "",
        "OrderIndicator": 15,
        "Slides": [],
        "Progress": 0.0,
        "Id": 5
      },
      "Name": "CSS, the language of web design",
      "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 15
    },
    {
      "LessonId": 25,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            }
          ],
          "Id": 1
        },
        "Name": "Web dev basics",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 25,
            "Name": "Intro to web development",
            "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
            "SandboxUrl": "",
            "OrderIndicator": 3,
            "IsRead": null,
            "Id": 77
          }
        ],
        "Progress": 0.0,
        "Id": 25
      },
      "Name": "Intro to programming",
      "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
      "SandboxUrl": "",
      "OrderIndicator": 0,
      "IsRead": null,
      "Id": 76
    },
    {
      "LessonId": 25,
      "Lesson": {
        "ModuleId": 1,
        "Module": {
          "SubTrackId": 13,
          "SubTrack": {
            "Level": 1,
            "TrackId": 5,
            "Track": null,
            "Name": "Main",
            "Modules": [
              {
                "SubTrackId": 13,
                "Name": "Power Up",
                "Color": "#2ecc71",
                "OrderIndicator": 3,
                "Lessons": [],
                "Id": 2
              },
              {
                "SubTrackId": 13,
                "Name": "Launch",
                "Color": "#3498db",
                "OrderIndicator": 6,
                "Lessons": [],
                "Id": 3
              }
            ],
            "MigrationVersion": 4,
            "ProductTemplateId": 19,
            "Locked": false,
            "Id": 13
          },
          "Name": "Kickstart",
          "Color": "#1abc9c",
          "OrderIndicator": 0,
          "Lessons": [
            {
              "ModuleId": 1,
              "Name": "HTML",
              "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "Slides": [
                {
                  "LessonId": 1,
                  "Name": "HTML the de facto language of the web",
                  "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 1
                },
                {
                  "LessonId": 1,
                  "Name": "Choose your editor",
                  "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 2
                },
                {
                  "LessonId": 1,
                  "Name": "Create HTML elements with tags",
                  "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 3
                },
                {
                  "LessonId": 1,
                  "Name": "When tags can only do so much, use attributes",
                  "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 4
                },
                {
                  "LessonId": 1,
                  "Name": "Exercices: recreating landing pages using HTML only",
                  "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 5
                }
              ],
              "Progress": 0.0,
              "Id": 1
            },
            {
              "ModuleId": 1,
              "Name": "HTML Forms",
              "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "Slides": [
                {
                  "LessonId": 2,
                  "Name": "Collecting data from the user",
                  "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 6
                },
                {
                  "LessonId": 2,
                  "Name": "Form validation",
                  "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 7
                },
                {
                  "LessonId": 2,
                  "Name": "Exercices: more landing pages",
                  "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 8
                }
              ],
              "Progress": 0.0,
              "Id": 2
            },
            {
              "ModuleId": 1,
              "Name": "CSS",
              "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "Slides": [
                {
                  "LessonId": 3,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 9
                },
                {
                  "LessonId": 3,
                  "Name": "Attach CSS to your HTML files",
                  "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 3,
                  "IsRead": null,
                  "Id": 10
                },
                {
                  "LessonId": 3,
                  "Name": "Target HTML elements with CSS selectors",
                  "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 6,
                  "IsRead": null,
                  "Id": 11
                },
                {
                  "LessonId": 3,
                  "Name": "CSS properties",
                  "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 9,
                  "IsRead": null,
                  "Id": 12
                },
                {
                  "LessonId": 3,
                  "Name": "CSS values",
                  "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 12,
                  "IsRead": null,
                  "Id": 13
                },
                {
                  "LessonId": 3,
                  "Name": "Importing",
                  "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 15,
                  "IsRead": null,
                  "Id": 74
                },
                {
                  "LessonId": 3,
                  "Name": "Responsive design",
                  "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 18,
                  "IsRead": null,
                  "Id": 75
                }
              ],
              "Progress": 0.0,
              "Id": 3
            },
            {
              "ModuleId": 1,
              "Name": "Project: Personal portfolio",
              "Content": "",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "Slides": [
                {
                  "LessonId": 4,
                  "Name": "Project: Personal portfolio",
                  "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 14
                }
              ],
              "Progress": 0.0,
              "Id": 4
            },
            {
              "ModuleId": 1,
              "Name": "Javascript",
              "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "Slides": [
                {
                  "LessonId": 5,
                  "Name": "CSS, the language of web design",
                  "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                  "SandboxUrl": "",
                  "OrderIndicator": 0,
                  "IsRead": null,
                  "Id": 15
                }
              ],
              "Progress": 0.0,
              "Id": 5
            }
          ],
          "Id": 1
        },
        "Name": "Web dev basics",
        "Content": "",
        "SandboxUrl": "",
        "OrderIndicator": 12,
        "Slides": [
          {
            "LessonId": 25,
            "Name": "Intro to programming",
            "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
            "SandboxUrl": "",
            "OrderIndicator": 0,
            "IsRead": null,
            "Id": 76
          }
        ],
        "Progress": 0.0,
        "Id": 25
      },
      "Name": "Intro to web development",
      "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
      "SandboxUrl": "",
      "OrderIndicator": 3,
      "IsRead": null,
      "Id": 77
    }
  ],
  "Modules": [
    {
      "SubTrackId": 13,
      "SubTrack": {
        "Level": 1,
        "TrackId": 5,
        "Track": null,
        "Name": "Main",
        "Modules": [
          {
            "SubTrackId": 13,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [],
            "Id": 2
          },
          {
            "SubTrackId": 13,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [],
            "Id": 3
          }
        ],
        "MigrationVersion": 4,
        "ProductTemplateId": 19,
        "Locked": false,
        "Id": 13
      },
      "Name": "Kickstart",
      "Color": "#1abc9c",
      "OrderIndicator": 0,
      "Lessons": [
        {
          "ModuleId": 1,
          "Name": "HTML",
          "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 0,
          "Slides": [
            {
              "LessonId": 1,
              "Name": "HTML the de facto language of the web",
              "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 1
            },
            {
              "LessonId": 1,
              "Name": "Choose your editor",
              "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 2
            },
            {
              "LessonId": 1,
              "Name": "Create HTML elements with tags",
              "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 3
            },
            {
              "LessonId": 1,
              "Name": "When tags can only do so much, use attributes",
              "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 4
            },
            {
              "LessonId": 1,
              "Name": "Exercices: recreating landing pages using HTML only",
              "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 5
            }
          ],
          "Progress": 0.0,
          "Id": 1
        },
        {
          "ModuleId": 1,
          "Name": "HTML Forms",
          "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 3,
          "Slides": [
            {
              "LessonId": 2,
              "Name": "Collecting data from the user",
              "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 6
            },
            {
              "LessonId": 2,
              "Name": "Form validation",
              "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 7
            },
            {
              "LessonId": 2,
              "Name": "Exercices: more landing pages",
              "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 8
            }
          ],
          "Progress": 0.0,
          "Id": 2
        },
        {
          "ModuleId": 1,
          "Name": "CSS",
          "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 6,
          "Slides": [
            {
              "LessonId": 3,
              "Name": "CSS, the language of web design",
              "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 9
            },
            {
              "LessonId": 3,
              "Name": "Attach CSS to your HTML files",
              "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 10
            },
            {
              "LessonId": 3,
              "Name": "Target HTML elements with CSS selectors",
              "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 6,
              "IsRead": null,
              "Id": 11
            },
            {
              "LessonId": 3,
              "Name": "CSS properties",
              "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 9,
              "IsRead": null,
              "Id": 12
            },
            {
              "LessonId": 3,
              "Name": "CSS values",
              "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 12,
              "IsRead": null,
              "Id": 13
            },
            {
              "LessonId": 3,
              "Name": "Importing",
              "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 15,
              "IsRead": null,
              "Id": 74
            },
            {
              "LessonId": 3,
              "Name": "Responsive design",
              "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 18,
              "IsRead": null,
              "Id": 75
            }
          ],
          "Progress": 0.0,
          "Id": 3
        },
        {
          "ModuleId": 1,
          "Name": "Project: Personal portfolio",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 9,
          "Slides": [
            {
              "LessonId": 4,
              "Name": "Project: Personal portfolio",
              "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 14
            }
          ],
          "Progress": 0.0,
          "Id": 4
        },
        {
          "ModuleId": 1,
          "Name": "Javascript",
          "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
          "SandboxUrl": "",
          "OrderIndicator": 15,
          "Slides": [
            {
              "LessonId": 5,
              "Name": "CSS, the language of web design",
              "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 15
            }
          ],
          "Progress": 0.0,
          "Id": 5
        },
        {
          "ModuleId": 1,
          "Name": "Web dev basics",
          "Content": "",
          "SandboxUrl": "",
          "OrderIndicator": 12,
          "Slides": [
            {
              "LessonId": 25,
              "Name": "Intro to programming",
              "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
              "SandboxUrl": "",
              "OrderIndicator": 0,
              "IsRead": null,
              "Id": 76
            },
            {
              "LessonId": 25,
              "Name": "Intro to web development",
              "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
              "SandboxUrl": "",
              "OrderIndicator": 3,
              "IsRead": null,
              "Id": 77
            }
          ],
          "Progress": 0.0,
          "Id": 25
        }
      ],
      "Id": 1
    },
    {
      "SubTrackId": 13,
      "SubTrack": {
        "Level": 1,
        "TrackId": 5,
        "Track": null,
        "Name": "Main",
        "Modules": [
          {
            "SubTrackId": 13,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 1,
                "Name": "HTML",
                "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 1,
                    "Name": "HTML the de facto language of the web",
                    "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 1
                  },
                  {
                    "LessonId": 1,
                    "Name": "Choose your editor",
                    "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 2
                  },
                  {
                    "LessonId": 1,
                    "Name": "Create HTML elements with tags",
                    "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 3
                  },
                  {
                    "LessonId": 1,
                    "Name": "When tags can only do so much, use attributes",
                    "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 4
                  },
                  {
                    "LessonId": 1,
                    "Name": "Exercices: recreating landing pages using HTML only",
                    "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 5
                  }
                ],
                "Progress": 0.0,
                "Id": 1
              },
              {
                "ModuleId": 1,
                "Name": "HTML Forms",
                "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 2,
                    "Name": "Collecting data from the user",
                    "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 6
                  },
                  {
                    "LessonId": 2,
                    "Name": "Form validation",
                    "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 7
                  },
                  {
                    "LessonId": 2,
                    "Name": "Exercices: more landing pages",
                    "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 8
                  }
                ],
                "Progress": 0.0,
                "Id": 2
              },
              {
                "ModuleId": 1,
                "Name": "CSS",
                "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 3,
                    "Name": "CSS, the language of web design",
                    "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 9
                  },
                  {
                    "LessonId": 3,
                    "Name": "Attach CSS to your HTML files",
                    "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 10
                  },
                  {
                    "LessonId": 3,
                    "Name": "Target HTML elements with CSS selectors",
                    "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 11
                  },
                  {
                    "LessonId": 3,
                    "Name": "CSS properties",
                    "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 12
                  },
                  {
                    "LessonId": 3,
                    "Name": "CSS values",
                    "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 13
                  },
                  {
                    "LessonId": 3,
                    "Name": "Importing",
                    "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 74
                  },
                  {
                    "LessonId": 3,
                    "Name": "Responsive design",
                    "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 75
                  }
                ],
                "Progress": 0.0,
                "Id": 3
              },
              {
                "ModuleId": 1,
                "Name": "Project: Personal portfolio",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 4,
                    "Name": "Project: Personal portfolio",
                    "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 14
                  }
                ],
                "Progress": 0.0,
                "Id": 4
              },
              {
                "ModuleId": 1,
                "Name": "Javascript",
                "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "Slides": [
                  {
                    "LessonId": 5,
                    "Name": "CSS, the language of web design",
                    "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 15
                  }
                ],
                "Progress": 0.0,
                "Id": 5
              },
              {
                "ModuleId": 1,
                "Name": "Web dev basics",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "Slides": [
                  {
                    "LessonId": 25,
                    "Name": "Intro to programming",
                    "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 76
                  },
                  {
                    "LessonId": 25,
                    "Name": "Intro to web development",
                    "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 77
                  }
                ],
                "Progress": 0.0,
                "Id": 25
              }
            ],
            "Id": 1
          },
          {
            "SubTrackId": 13,
            "Name": "Launch",
            "Color": "#3498db",
            "OrderIndicator": 6,
            "Lessons": [],
            "Id": 3
          }
        ],
        "MigrationVersion": 4,
        "ProductTemplateId": 19,
        "Locked": false,
        "Id": 13
      },
      "Name": "Power Up",
      "Color": "#2ecc71",
      "OrderIndicator": 3,
      "Lessons": [],
      "Id": 2
    },
    {
      "SubTrackId": 13,
      "SubTrack": {
        "Level": 1,
        "TrackId": 5,
        "Track": null,
        "Name": "Main",
        "Modules": [
          {
            "SubTrackId": 13,
            "Name": "Kickstart",
            "Color": "#1abc9c",
            "OrderIndicator": 0,
            "Lessons": [
              {
                "ModuleId": 1,
                "Name": "HTML",
                "Content": "<p>In this module we will learn the language of web content creation: HTML</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 0,
                "Slides": [
                  {
                    "LessonId": 1,
                    "Name": "HTML the de facto language of the web",
                    "Content": "<h1 id=\"html-the-de-facto-language-of-the-web\">HTML, the de facto language of the web</h1>\n<p>At its heart, HTML is a fairly simple language made up of elements, which can be applied to pieces of text to give them different meaning in a document (is it a paragraph? is it a bulleted list? is it part of a table?), structure a document into logical sections (does it have a header? three columns of content? a navigation menu?) and embed content such as images and videos into a page. This module will introduce the first two of these, and introduce fundamental concepts and syntax you need to know to understand HTML.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Let's start by taking a look at a webpage we're all familiar with, <a href=\"www.google.com\">google.com</a>:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google.png\" alt=\"screenshot of google.com\"></p>\n<ul>\n<li>You have access to the behind-the-scenes code that \"creates\" the view you see</li>\n<li>You can open the <em>Chrome Dev Tools</em> by pressing <code>F12</code></li>\n<li><em>Chrome Dev Tools</em> looks like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools.png\" alt=\"screenshot of google.com with dev tools\"></p>\n<ul>\n<li>As you can see, Chrome Dev Tools has many features we need</li>\n<li>At first it might seem too much, but no worries we will only learn the things we need</li>\n<li>We'll only be focusing on the <code>Elements</code> pane for the moment</li>\n<li>This is the part that has the HTML code in it:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/google-dev-tools-html.png\" alt=\"screenshot of google.com with dev tools with focus on HTML code\"></p>\n<hr>\n<h2 id=\"whats-html\">What's HTML?</h2>\n<ul>\n<li>HTML (stands for HyperText Markup Language), is the standard markup language for creating webpages*</li>\n<li>HTML describes the structure of webpages using markup</li>\n<li>HTML elements are the building blocks of HTML pages</li>\n<li>HTML elements are structures as a tree, i.e. every element has 0 or more child elements but one and only one parent**</li>\n</ul>\n<p>* in fact, HTML is the only markup language of the web</p>\n<p>** except the root HTML element, which has no parent element</p>\n<p>To get familiar with the structure of HTML, you can play around with the Elements pane :</p>\n<hr>\n<h2 id=\"inspecting-elements\">Inspecting elements</h2>\n<ul>\n<li>To inspect the HTML code of any element on the page, right-click it then click on <code>Inspect</code></li>\n<li>You can also use element inspector tool image of element inspector button and hover over elements to inspect them</li>\n<li>Or you can hover over elements inside the Dev Tools Elements pane</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 1
                  },
                  {
                    "LessonId": 1,
                    "Name": "Choose your editor",
                    "Content": "<h1 id=\"choose-your-editor\">Choose your editor</h1>\n<ul>\n<li>We will write our code in text files</li>\n<li>We can use a normal text editor, e.g. <code>Notepad/Bloc-notes</code>, <code>gedit</code>...</li>\n<li>Alternatively, we can use a text editor that has special features that can help us coding</li>\n<li>Here are some examples of code editors we can use:\n<ul>\n<li><p>Sublime Text <img src=\"/content/fullstack-course/01 HTML/img/sublime-text.png\" alt=\"screenshot of Sublime Text\"></p>\n</li>\n<li><p>VS Code <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of VS Code\"></p>\n</li>\n<li><p>Atom <img src=\"/content/fullstack-course/01 HTML/img/vs-code.jpg\" alt=\"screenshot of Atom\"></p>\n</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 2
                  },
                  {
                    "LessonId": 1,
                    "Name": "Create HTML elements with tags",
                    "Content": "<h1 id=\"getting-started-with-html\">Getting started with HTML</h1>\n<p><strong>Objective: </strong>To gain basic familiarity with the HTML language, and get some practice writing a few HTML elements.</p>\n<h2 id=\"anatomy-of-html-element\">Anatomy of HTML element</h2>\n<ul>\n<li><p>HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of the content to make it appear or act a certain way.</p>\n</li>\n<li><p>The enclosing tags can make a bit of content into a hyperlink to link to another page on the web, italicize words, and so on.  For example, take the following line of content:</p>\n</li>\n</ul>\n<pre><code class=\"language-code\">My cat is very grumpy\n</code></pre>\n<p>If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph tag  (<code>&lt;p&gt;</code>) element:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is very grumpy&lt;/p&gt;\n</code></pre>\n<p>Let's explore our paragraph element a bit further:</p>\n<p align=\"center\">\n  <img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-small.png\" alt=\"\">\n</p>\n<p>The main parts of our element are:</p>\n<ol>\n<li><strong>The opening tag</strong>: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. This states where the element begins, or starts to take effect — in this case where the start of the paragraph is.</li>\n<li><strong>The closing tag</strong>: This is the same as the opening tag, except that it includes a forward slash before the element name. This states where the element ends — in this case where the end of the paragraph is. Failing to include a closing tag is a common beginner error and can lead to strange results.</li>\n<li><strong>The content</strong>: This is the content of the element, which in this case is just text.</li>\n<li><strong>The element</strong>: The opening tag plus the closing tag plus the content equals the element.</li>\n</ol>\n<h2 id=\"nesting-elements\">Nesting elements</h2>\n<p>You can put elements inside other elements too — this is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word \"very\" in a <code>&lt;strong&gt;</code> element, which means that the word is to be strongly emphasized:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very&lt;/strong&gt; grumpy.&lt;/p&gt;\n</code></pre>\n<p>You do however need to make sure that your elements are properly nested: in the example above we opened the p element first, then the strong element, therefore we have to close the strong element first, then the p. The following is incorrect:</p>\n<pre><code class=\"language-html\">&lt;p&gt;My cat is &lt;strong&gt;very grumpy.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>\n<p>The elements have to open and close correctly so they are clearly inside or outside one another. If they overlap like above, then your web browser will try to make a best guess at what you were trying to say, and you may well get unexpected results. So don't do it!</p>\n<h2 id=\"writing-our-first-html-file\">Writing our first HTML file</h2>\n<ul>\n<li>Now we've talked the talk, let's walk the walk. Grab the editor of your choice and let's write us some HTML!</li>\n<li>First, copy the following code into a new HTML file:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>Notice the code is indented to simulate the actual structure of the document.</li>\n<li>We can clearly see the <code>head</code> and <code>body</code> elements are children of the <code>html</code> element and that the <code>h1</code> and <code>p</code> elements are children of the body.</li>\n<li>It is not mandatory to write with indentation, but it is a good practice</li>\n<li>Now, save the file (remember to save as <code>.html</code> file) and open it with Google Chrome. You'll get something like this:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-barebone.png\" alt=\"screenshot of barebone HTML file\"></p>\n<hr>\n<h2 id=\"elements-vs-tags\">Elements VS Tags</h2>\n<ul>\n<li>An HTML element is what the web browser shows on the screen*. In order to create one, you need to describe it to the browser in the HTML file using a tag or a pair of tags**.</li>\n</ul>\n<p>* Actually, not all elements get rendered. For instance, the <code>header</code> is just a container for other elements</p>\n<p>** Yes, some elements need only one tag. e.g <code>&lt;hr&gt;</code> which creates a horizontal line.</p>\n<p><img src=\"/content/fullstack-course/01 HTML/img/html-elemnt-vs-tag.png\" alt=\"image explaining content of HTML element\"></p>\n<ol>\n<li>an HTML description of a <code>body</code> element with to child elements: a <code>h1</code> and a <code>p</code></li>\n<li>the opening tag for the <code>body</code> element that marks its beginning</li>\n<li>the closing tag, notice the <code>/</code> character that differentiates it from the opening tag. Everything between the opening and closing tags is the content of the element</li>\n<li>the child elements of the <code>body</code>. Notice that the browser would automatically indent them in even if the source code does not for clarity sake</li>\n</ol>\n<hr>\n<h2 id=\"common-html-tags\">Common HTML tags</h2>\n<p>Match every tag in the following list with its corresponding definition: <code>html</code>, <code>head</code>, <code>title</code>, <code>body</code>, <code>div</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>, <code>h1</code>..<code>h6</code>, <code>hr</code></p>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a <em>horizontal line</em> that divides content to sections</td>\n</tr>\n<tr>\n<td></td>\n<td>a <em>list item</em>, it must be the child of a list element</td>\n</tr>\n<tr>\n<td></td>\n<td>definitely the most used tag, its purpose is usually just to group other elements in groups or <em>divisions</em></td>\n</tr>\n<tr>\n<td></td>\n<td>a paragraph of text</td>\n</tr>\n<tr>\n<td></td>\n<td>the <em>title</em> of the webpage, browsers use it as the window title as well</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>unordered list</em>, typically rendered as a bullet list</td>\n</tr>\n<tr>\n<td></td>\n<td>an <em>ordered list</em>, typically rendered as a numbered list</td>\n</tr>\n<tr>\n<td></td>\n<td>describes the <em>root</em> element, the ancestor of all other elements on the page</td>\n</tr>\n<tr>\n<td></td>\n<td>a non-visible element that holds metadata about the wepage's content as well as links to external resources it uses</td>\n</tr>\n<tr>\n<td></td>\n<td>the root element of all <em>visible</em> elements on the page, i.e. its <em>content</em></td>\n</tr>\n<tr>\n<td></td>\n<td>represent different levels of section heading, 1 being the most important</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"the-comment-tag\">The comment tag</h2>\n<ul>\n<li><p>Like almost all languages, HTML provides a way for its writers to write comments that get completely ignored by the browser but can be understood by human readers.</p>\n</li>\n<li><p>To get familiar with the utility of a comment, we'll be using the previous example and annotating it for clarity:</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt; &lt;!-- Beginning of root element --&gt;\n  &lt;head&gt;\n    &lt;!-- Most browsers use this title for the window title as well --&gt;\n    &lt;title&gt;Look to the tab title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;!--\n    The body is the root element for the content of the page\n    Notice you can write multi-line comments in the same way\n  --&gt;\n  &lt;body&gt;\n    &lt;h1&gt;My personal webpage&lt;/h1&gt;\n    &lt;p&gt;I write HTML like a robot&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt; &lt;!-- End of root element --&gt;\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 3
                  },
                  {
                    "LessonId": 1,
                    "Name": "When tags can only do so much, use attributes",
                    "Content": "<h1 id=\"when-tags-can-only-do-so-much-use-attributes\">When tags can only do so much, use attributes</h1>\n<p>Elements can also have attributes, which look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/grumpy-cat-attribute-small.png\" alt=\"\">\n</p>\n<p>An attribute should have:</p>\n<ol>\n<li>A space between it and the element name (or the previous attribute, if the element already has one or more attributes.)</li>\n<li>The attribute name, followed by an equals sign.</li>\n<li>An attribute value, with opening and closing quote marks wrapped around it.</li>\n</ol>\n<hr>\n<h2 id=\"meet-the-anchor-tag-a\">Meet the anchor tag: <strong><code>&lt;a&gt;</code></strong></h2>\n<p>Another example of an element is <code>&lt;a&gt;</code> — this stands for anchor and will make the piece of text it wraps around into a hyperlink. This can take a number of attributes, but several are as follows:</p>\n<ul>\n<li><strong>href</strong>: This attribute specifies as its value the web address that you want the link to point to; where the browser navigates to when the link is clicked. For example, <code>href=\"https://www.gomycode.tn/\"</code>(<a href=\"https://www.gomycode.tn\">https://www.gomycode.tn</a>).</li>\n<li><strong>title</strong>: The title attribute specifies extra information about the link, such as what the page is that you are linking to. For example, title=\"The Mozilla homepage\". This will appear as a tooltip when hovered over.</li>\n<li><strong>target</strong>: The target attribute specifies browsing context which will be used to display the link. For example, target=\"_blank\" will display the link in a new tab. If you want to display the link in the current tab just omit this attribute.</li>\n</ul>\n<hr>\n<h2 id=\"meet-the-image-tag-img\">Meet The image tag: <strong><code>&lt;img&gt;</code></strong></h2>\n<ul>\n<li>Another essential tag that needs an attribute to make sense is the <code>img</code> tag, which represents an image. It holds the source path to its image file in an attribute called <code>src</code>.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\"&gt;&lt;/img&gt;\n</code></pre>\n<ul>\n<li>But what happens when the path does not lead to a valid image ?</li>\n<li>Another attribute holds the text to be displayed in case no image is found or if the user uses a screen reader. It's name is <code>title</code>.</li>\n<li>NB: The <code>title</code> tag and the <code>title</code> attribute are two separate things. Don't worry, the browser knows both of them.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;img src=\"avatar.jpg\" title=\"avatar image of the user\"&gt;&lt;/img&gt;\n</code></pre>\n<hr>\n<h3 id=\"universal-attributes-class-and-id\">Universal attributes: <strong><code>class</code></strong> and <strong><code>id</code></strong></h3>\n<ul>\n<li><p>In the next lesson, we'll be taking a look to another language that describes not the structure of a webpage, but how it looks like.</p>\n</li>\n<li><p>In order for this language to target specific elements and not all of them, we need to give those elements identifiers. * That's where come two very common attributes: <code>class</code> and <code>id</code>.</p>\n</li>\n<li><p><code>class</code> is applied to one or many elements to get the same look or behavior.</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;ul&gt;\n  &lt;li class=\"bold-text\"&gt;Home&lt;/li&gt;\n  &lt;li class=\"bold-text selected\"&gt;Our programs&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Locations&lt;/li&gt;\n  &lt;li class=\"bold-text\"&gt;Log in&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ul>\n<li>In the above example, all 4 <code>li</code>s are given a class of <code>bold-text</code>. This is an arbitrary name given by the developer and does do anything by its own.</li>\n<li>Notice also that the second <code>li</code> has another class: <code>selected</code>. This is probably going to be used later on the CSS side to give the selected item a distinct look.</li>\n<li>the <code>id</code> tag: only one element on the page should have the same <code>id</code>.</li>\n<li>This could be, e.g., a way to identify the main header of the page:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;h1 id=\"main-header\"&gt;Leadership&lt;/h1&gt;\n&lt;p&gt;In a galaxy far far away...&lt;/p&gt;\n</code></pre>\n<h2 id=\"anatomy-of-an-html-document\">Anatomy of an HTML document</h2>\n<p>That wraps up the basics of individual HTML elements, but they aren't very useful on their own. Now we'll look at how individual elements are combined to form an entire HTML page:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Here we have:</p>\n<ol>\n<li><code>&lt;!DOCTYPE html&gt;</code>: The doctype. In the mists of time, when HTML was young (about 1991/2), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. They used to look something like this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n<p>However, these days no one really cares about them, and they are really just a historical artifact that needs to be included for everything to work right. <code>&lt;!DOCTYPE html&gt;</code> is the shortest string of characters that counts as a valid doctype; that's all you really need to know.</p>\n<ol start=\"2\">\n<li><p><code>&lt;html&gt;&lt;/html&gt;</code>: The <code>&lt;html&gt;</code> element. This element wraps all the content on the entire page, and is sometimes known as the root element.</p>\n</li>\n<li><p><code>&lt;head&gt;&lt;/head&gt;</code>: The <code>&lt;head&gt;</code> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. You'll learn more about this in the next article in the series.</p>\n</li>\n<li><p><code>&lt;meta charset=\"utf-8\"&gt;</code>: This element sets the character set your document should use to UTF-8, which includes most characters from the vast majority of human written languages. Essentially it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.</p>\n</li>\n<li><p><code>&lt;title&gt;&lt;/title&gt;</code>: The <code>&lt;title&gt;</code> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in, and is used to describe the page when you bookmark/favourite it.</p>\n</li>\n<li><p><code>&lt;body&gt;&lt;/body&gt;</code>: The <code>&lt;body&gt;</code> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else.</p>\n</li>\n</ol>\n<h2 id=\"active-learning-adding-some-features-to-an-html-document\">Active learning: Adding some features to an HTML document</h2>\n<p>If you want to experiment with writing some HTML on your local computer, you can:</p>\n<ol>\n<li>Copy the HTML page example listed above.</li>\n<li>Create a new file in your text editor.</li>\n<li>Paste the code into the new text file.</li>\n<li>Save the file as <code>index.html</code></li>\n</ol>\n<p>You can now open this file in a web browser to see what the rendered code looks like, and then edit the code and refresh the browser to see what the result is. Initially it will look like this:</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/01 HTML/img/template-screenshot.png\" alt=\"\">\n</p>\n<p>So in this exercise, you can edit the code locally on your computer, as outlined above, or you can edit it in the editable sample window below (the editable sample window represents just the contents of the <code>&lt;body&gt;</code> element, in this case.) We'd like you to have a go at implementing the following steps:</p>\n<ul>\n<li>Just below the opening tag of the <code>&lt;body&gt;</code> element, add a main title for the document. This should be wrapped inside an <code>&lt;h1&gt;</code> opening tag and <code>&lt;/h1&gt;</code> closing tag.</li>\n<li>Edit the paragraph content to include some text about something you are interested in.\nMake any important words stand out in bold by wrapping them inside a <code>&lt;strong&gt;</code> opening tag and <code>&lt;/strong&gt;</code> closing tag</li>\n<li>Add a link to your paragraph, as explained earlier in the article.</li>\n<li>Add an image to your document, below the paragraph, as explained earlier in the article. You'll get * bonus points if you manage to link to a different image (either locally on your computer, or somewhere else on the web.)</li>\n</ul>\n<h2 id=\"summary\">Summary</h2>\n<p>we hope you enjoyed your tour of the very basics of HTML! At this point you should understand what the language looks like, how it works at a basic level, and be able to write a few elements and attributes.</p>\n<blockquote>\n<p><strong>Note: </strong>At this point, as you start to learn more about HTML, you might also want to start to explore the basics of Cascading Style Sheets, or CSS. CSS is the language you use to style your web pages (whether e.g. changing the font or colors, or altering the page layout). HTML and CSS go very well together, as you'll soon discover.</p>\n</blockquote>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 4
                  },
                  {
                    "LessonId": 1,
                    "Name": "Exercices: recreating landing pages using HTML only",
                    "Content": "<h2 id=\"landing-page-1\">Landing page 1</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This task is about decomposing a mockup into separate sections even before learning CSS\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-1.gif\" alt=\"example of a landing page\"></li>\n</ul>\n<h2 id=\"landing-page-2\">Landing page 2</h2>\n<ul>\n<li>Recreate the content of this landing page using only HTML</li>\n<li>This time it's a little more complicated\n<img src=\"/content/fullstack-course/01 HTML/img/landing-page-example-2.png\" alt=\"another example of a landing page\"></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 5
                  }
                ],
                "Progress": 0.0,
                "Id": 1
              },
              {
                "ModuleId": 1,
                "Name": "HTML Forms",
                "Content": "<p>In this module, we will learn how to get information from the user using HTML forms</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 3,
                "Slides": [
                  {
                    "LessonId": 2,
                    "Name": "Collecting data from the user",
                    "Content": "<h1 id=\"collecting-data-from-user-forms\">Collecting data from user: Forms</h1>\n<h2 id=\"html-forms\">HTML forms</h2>\n<ul>\n<li>HTML Forms are one of the main points of interaction between a user and a web site or application</li>\n<li>They allow users to send data to the web site</li>\n</ul>\n<h2 id=\"the-form-tag\">The form tag</h2>\n<ul>\n<li>The <code>&lt;form&gt;</code> element formally defines a form and attributes that determine the behavior of this form</li>\n<li>Each time you want to create an HTML form, you must start it by using this element, putting all the contents inside</li>\n</ul>\n<blockquote>\n<p>It's not allowed to nest a form inside another form. Nesting can cause forms to behave in an unpredictable manner</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n\n&lt;/form&gt;\n</code></pre>\n<hr>\n<h2 id=\"text-inputs\">Text inputs</h2>\n<ul>\n<li>HTML provides few ways for the user to enter text data:\n<ul>\n<li>text inputs</li>\n<li>text areas</li>\n<li>password inputs</li>\n</ul>\n</li>\n<li>The following attributes are available:\n<ul>\n<li><code>value</code>: to set the text inside the element</li>\n<li><code>placeholder</code>: is the default text that the user before writing any text</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"single-line-text\">Single-line text</h3>\n<pre><code class=\"language-html\">&lt;input type=\"text\" value=\"look at me now!\"&gt;&lt;br&gt;\n&lt;input type=\"text\" placeholder=\"Change me\"&gt;\n</code></pre>\n<p><input type=\"text\" value=\"look at me now!\"><br>\n<input type=\"text\" placeholder=\"Change me\"></p>\n<h3 id=\"multi-line-text-input\">Multi-line text input</h3>\n<pre><code class=\"language-html\">&lt;textarea&gt;&lt;/textarea&gt;\n</code></pre>\n<p><textarea></textarea></p>\n<h3 id=\"password-input\">Password input</h3>\n<pre><code class=\"language-html\">&lt;input type=\"password\" value=\"you can't see me\"&gt;\n</code></pre>\n<input type=\"password\" value=\"you can't see me\">\n<hr>\n<h2 id=\"radio-button-input-groups\">Radio button input groups</h2>\n<ul>\n<li>Use radio buttons when you want the user to choose one of multiple choices</li>\n<li>Notice that in order for a group of radio buttons to behave correctly, they need to have the same <code>name</code> and different <code>value</code>s</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your field of expertise:&lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\"&gt;\n  &lt;label for=\"tech\"&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\"&gt;\n  &lt;label for=\"bio\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\"&gt;\n  &lt;label for=\"architecture\"&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"radio\" id=\"education\" name=\"field\" value=\"education\"&gt;\n  &lt;label for=\"education\"&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your field of expertise:<br>\n  <input type=\"radio\" id=\"tech\" name=\"field\" value=\"tech\">\n  <label for=\"tech\">Technology</label>\n  <br>\n  <input type=\"radio\" id=\"bio\" name=\"field\" value=\"bio\">\n  <label for=\"bio\">Biology</label>\n  <br>\n  <input type=\"radio\" id=\"architecture\" name=\"field\" value=\"architecture\">\n  <label for=\"architecture\">Architecture</label>\n  <br>\n  <input type=\"radio\" id=\"education\" name=\"field\" value=\"education\">\n  <label for=\"education\">Education</label>  \n</form>\n<hr>\n<h2 id=\"checkbox-input-groups\">Checkbox input groups</h2>\n<ul>\n<li>Checkbox inputs are similar to radio inputs: they only make sense in groups and are used to provide the user with multiple choices</li>\n<li>With Checkbox inputs however, you can choose many options</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  Choose your fields of expertise:&lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Technology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;labelfor=\"bio1\"&gt;Biology&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\" &gt;\n  &lt;label&gt;Architecture&lt;/label&gt;\n  &lt;br&gt;\n\n  &lt;input type=\"checkbox\"&gt;\n  &lt;label&gt;Education&lt;/label&gt;  \n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  Choose your fields of expertise:<br>\n  <input type=\"checkbox\">\n  <label>Technology</label>\n  <br>\n  <input type=\"checkbox\">\n  <labelfor=\"bio1\">Biology\n  <br>\n  <input type=\"checkbox\">\n  <label>Architecture</label>\n  <br>\n  <input type=\"checkbox\">\n  <label>Education</label>  \n\n<hr>\n<h2 id=\"select-and-option\">Select and option</h2>\n<ul>\n<li>Another popular method to ask users for information is using <code>select</code> and <code>option</code>s:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n\n</code></pre>\n<select name=\"select\">\n  <option value=\"value1\">Value 1</option>\n  <option value=\"value2\">Value 2</option>\n  <option value=\"value3\">Value 3</option>\n</select>\n<hr>\n<h2 id=\"form-control-buttons\">Form control buttons</h2>\n<h3 id=\"submit-button\">Submit button</h3>\n<ul>\n<li>The <code>submit</code> button sends the form information to the url specified in the <code>action</code> attribute of the parent <code>form</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"\"&gt;\n  &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\" value=\"\">\n  <input type=\"submit\">\n</form>\n<h3 id=\"reset-button\">Reset button</h3>\n<ul>\n<li>The <code>cancel</code> button clears all inputs in the current form.</li>\n</ul>\n<pre><code class=\"language-html\">&lt;form action=\"index.html\" method=\"post\"&gt;\n  &lt;input type=\"text\" value=\"clear me\"&gt;\n  &lt;input type=\"reset\"&gt;\n&lt;/form&gt;\n</code></pre>\n<form action=\"index.html\" method=\"post\">\n  <input type=\"text\">\n  <input type=\"reset\">\n</form>\n<hr>\n<h2 id=\"activity-signup-form\">Activity: Signup form</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Mobile number</li>\n<li>Username</li>\n<li>Password</li>\n<li>Birthday</li>\n</ul>\n</li>\n<li>Extras\n<ul>\n<li>use other input types than <code>text</code></li>\n</ul>\n</li>\n</ul>\n</labelfor=\"bio1\"></form>",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 6
                  },
                  {
                    "LessonId": 2,
                    "Name": "Form validation",
                    "Content": "<h1 id=\"form-validation\">Form validation</h1>\n<h2 id=\"required-attribute\">Required attribute</h2>\n<p>To require that an input is filled, you can add the <code>required</code> attribute to it</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" required&gt;\n</code></pre>\n<h2 id=\"maxlength-and-minlength\">Maxlength and minlength</h2>\n<p>For text fields, you can require that it reaches a minimum length or can't surpass a maximum length, or both.</p>\n<pre><code class=\"language-html\">&lt;input type=\"text\" minlength=\"10\"&gt;\n&lt;input type=\"password\" minlength=\"8\" maxlength=\"20\"&gt;\n</code></pre>\n<h2 id=\"activity\">Activity</h2>\n<ul>\n<li>Write an HTML form for user sign up that asks the user to provide these information about himself:\n<ul>\n<li>First name (required)</li>\n<li>Last name (required)</li>\n<li>Mobile number (optional)</li>\n<li>Username (required)</li>\n<li>Password (required)</li>\n<li>Birthday (optional)</li>\n</ul>\n</li>\n<li>Make sure the first and last names are at least 2 characters long each</li>\n<li>Make sure the password is at least 8 characters long</li>\n<li>Extras\n<ul>\n<li>Make sure the user is at least 12 years old</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 7
                  },
                  {
                    "LessonId": 2,
                    "Name": "Exercices: more landing pages",
                    "Content": "<h2 id=\"yet-another-landing-page\">Yet another landing page</h2>\n<ul>\n<li>Again, recreate the following landing page using HTML only.</li>\n<li>This time around, our landing page contains a form.\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"one-last-landing-page\">One last landing page</h2>\n<ul>\n<li>By this time, you should be familiar with it ;)\n<img src=\"/content/fullstack-course/03 HTML forms/img/landing-page-example-2.png\" alt=\"\"></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 8
                  }
                ],
                "Progress": 0.0,
                "Id": 2
              },
              {
                "ModuleId": 1,
                "Name": "CSS",
                "Content": "<p>In this module, we will learn how to customize HTML elements using the language of web design: CSS</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 6,
                "Slides": [
                  {
                    "LessonId": 3,
                    "Name": "CSS, the language of web design",
                    "Content": "<h1 id=\"css-the-language-of-web-design\">CSS, the language of web design</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<ul>\n<li>Just like we did with HTML, let's jump back to <a href=\"www.google.com\">google.com</a> and open Chrome Dev Tools. This time around, we'll be looking at the styles section</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/google-dev-tools-styles.png\" alt=\"screenshot of chrome dev tools with focus on CSS code\"></p>\n<hr>\n<h2 id=\"whats-css\">What's CSS?</h2>\n<ul>\n<li>CSS stands for Cascading Style Sheets</li>\n<li>CSS describes <em>how</em> the browser should display elements on a laptop screen, a smartphone screen, a piece of paper or other media</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/css-syntax.png\" alt=\"CSS structure\"></p>\n<ol>\n<li>a CSS rule: consists of a selector and a declaration block</li>\n<li>2 CSS selector: points to the HTML element we want to style</li>\n<li>a CSS declaration block: contains one or more declarations separated by semicolons</li>\n<li>a CSS declaration: Each declaration includes a CSS property name and a value, separated by a colon</li>\n</ol>\n<hr>\n<h2 id=\"hello-css\">Hello CSS</h2>\n<p>In the following example, we are setting the font size of all <code>h1</code> elements on the page to 28 pixels:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 28px;\n}\n</code></pre>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 9
                  },
                  {
                    "LessonId": 3,
                    "Name": "Attach CSS to your HTML files",
                    "Content": "<h1 id=\"attach-css-to-you-html-files\">Attach CSS to you HTML files</h1>\n<p>Once we finish writing the structure of a webpage with HTML, the next step is to wire up some CSS to it to give a distinct look and feel.</p>\n<hr>\n<h2 id=\"inline-style-the-style-attribute\">Inline style, the <code>style</code> attribute:</h2>\n<p>The easiest way to target one specific element on the page is to use the style tag:</p>\n<pre><code class=\"language-html\">&lt;h1 style=\"font-size: 20px; color: red;\"&gt;Attach CSS to your HTML files&lt;/h1&gt;\n</code></pre>\n<p>But this approach has few problems:</p>\n<ul>\n<li>One and only element could be targeted each time. Imagine having to write the same style for all <code>p</code> paragraph elements on a webpage.</li>\n<li>Lack of maintainability. Now imagine you want to change the style of all <code>p</code> paragraph elements. Too much wasted time.</li>\n<li>The structure and design of the webpage are tightly coupled together. This approach does not allow multiple pages to share the same styling.</li>\n</ul>\n<hr>\n<h2 id=\"inline-stylesheet-the-style-tag\">Inline stylesheet, the <code>style</code> tag</h2>\n<p>Most of the previous issues could be fixed by using the <code>style</code> tag.</p>\n<pre><code class=\"language-html\">  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-size: 28px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;I am the title!&lt;/h1&gt;\n  &lt;/body&gt;\n</code></pre>\n<p>This approach gives us more control over what elements to target and we can easily change the styling of multiple elements. But it still does not decouple the styling from the structure as they both live in the same HTML page.</p>\n<hr>\n<h2 id=\"external-stylesheet-the-link-tag\">External stylesheet, the <code>link</code> tag</h2>\n<p>The <code>link</code> tag is used to include different types of assets into webpage. In this lesson, we'll only be considering how to use it to include <code>CSS</code> stylesheet files into an <code>HTML</code> file.</p>\n<p>In the HTML file, we would point to the location of the CSS file like this:</p>\n<pre><code class=\"language-html\">&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code class=\"language-css\">  h1 {\n    font-size: 28px;\n  }\n</code></pre>\n<p>This is the approach most developers use as it allows multiple webpages to use the same stylesheet.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 10
                  },
                  {
                    "LessonId": 3,
                    "Name": "Target HTML elements with CSS selectors",
                    "Content": "<h1 id=\"target-html-elements-with-css-selectors\">Target HTML elements with CSS selectors</h1>\n<p>Let's take a look at this CSS snippet:</p>\n<pre><code class=\"language-css\">h1, h2 {\n  background-color: red;\n}\n</code></pre>\n<p>What this CSS <em>rule</em> describes is that all <code>h1</code> and <code>h2</code> elements on the webpage are to have a red background color.</p>\n<p>But what if we wanted to be more specific and target only? As we saw in the HTML course, there are two ways we can do this:</p>\n<ul>\n<li>Assign the same <code>class</code> to the elements we want to apply the same styling to. e.g <code>section-header</code>, <code>image-caption</code>...</li>\n<li>Assign unique <code>id</code>s to elements on the page that appear only once. e.g. <code>main-header</code>, <code>user-profile-image</code>...</li>\n</ul>\n<p>In the CSS side, we can target a class by prepending a <code>.</code> to its name and an id by prepending <code>#</code></p>\n<pre><code class=\"language-css\">.section-header {\n  background-color: blue;\n}\n#main-header {\n  background-color: red;\n}\n</code></pre>\n<p>You can also have a rule target many types of elements using multiple selectors:</p>\n<pre><code class=\"language-css\">h2, .image-caption {\n  background-color: grey;\n}\n</code></pre>\n<h2 id=\"descendant-and-child-selectors\">Descendant and child selectors</h2>\n<ul>\n<li><p>You can target elements based on their ancestors</p>\n</li>\n<li><p>to select nodes that are descendants of the first element:</p>\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;h1 class=\"header\"&gt;Getting stuff done&lt;/h1&gt;\n  &lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.container span {\n  font-weight: bold;\n}\n</code></pre>\n<ul>\n<li>or you can use the direct child selector which selects nodes that are direct children of the first element</li>\n</ul>\n<pre><code class=\"language-css\">.container &gt; h1 {\n  font-size: 28px;\n}\n</code></pre>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 6,
                    "IsRead": null,
                    "Id": 11
                  },
                  {
                    "LessonId": 3,
                    "Name": "CSS properties",
                    "Content": "<h1 id=\"css-properties\">CSS properties</h1>\n<h2 id=\"colors-in-css\">Colors in CSS</h2>\n<ul>\n<li>A color value in CSS can be specified by:\n<ul>\n<li>a valid color name. e.g. <code>red</code>, <code>white</code>, <code>lightgrey</code>...*</li>\n<li>an RGB value. e.g. <code>rgb(0, 119, 13)</code></li>\n<li>a hexadecimal value. e.g. <code>#fff</code>, <code>#15f023</code></li>\n</ul>\n</li>\n<li>A color is a combination of three RGB values (Red, Green, Blue). Every one of the the three values ranges from 0 to 255</li>\n<li>These are examples of properties that use color values:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>color</code></td>\n<td>the color of the text of the element</td>\n</tr>\n<tr>\n<td><code>background-color</code></td>\n<td>the background color of the element</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"display\"><code>display</code></h2>\n<ul>\n<li>All element on a webpage are in the form of a rectangle</li>\n<li>The display CSS property specifies the type of rendering box used for an element</li>\n<li>There are 3 main box formats in CSS:</li>\n</ul>\n<p><img src=\"/content/fullstack-course/04 CSS/img/display.png\" alt=\"\"></p>\n<h3 id=\"displayblock\"><code>display:block</code></h3>\n<ul>\n<li>The element will take as much horizontal space as possible</li>\n<li>We can change the width an height of the element</li>\n<li>examples of elements that have <code>display: block</code> by default: <code>p</code>, <code>h1</code>..<code>h6</code>, <code>hr</code>, <code>li</code></li>\n</ul>\n<h3 id=\"display-inline-block\"><code>display: inline-block</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We can change the width and height of the element</li>\n<li>The element can NOT break in the middle</li>\n<li>examples of elements that have <code>display: inline-block</code> by default: <code>img</code>, <code>button</code>, <code>input</code></li>\n</ul>\n<h3 id=\"display-inline\"><code>display: inline</code></h3>\n<ul>\n<li>The element will take as little horizontal space as possible</li>\n<li>The element will allow other inline elements to be on its sides</li>\n<li>We CANNOT change the width and height of the element</li>\n<li>The element can break in the middle</li>\n<li>examples of elements that have <code>display: inline</code> by default: <code>a</code>, <code>span</code></li>\n</ul>\n<h3 id=\"displaynone\"><code>display:none</code></h3>\n<ul>\n<li>Do not display the element at all</li>\n<li>This value is useful when we want e.g. to hide an element by default and only show it after a certain event happens</li>\n</ul>\n<hr>\n<h2 id=\"activity-default-displays\">Activity: Default displays</h2>\n<ul>\n<li>What is the default display of the following tags?:</li>\n<li>Try it yourself and decide for every tag</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th><code>div</code></th>\n<th><code>p</code></th>\n<th><code>ul</code></th>\n<th><code>ol</code></th>\n<th><code>li</code></th>\n<th><code>h1</code>..<code>h6</code></th>\n<th><code>hr</code></th>\n<th><code>img</code></th>\n<th><code>button</code></th>\n<th><code>input</code></th>\n<th><code>a</code></th>\n<th><code>span</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default <code>display</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"width-and-height\"><code>width</code> and <code>height</code></h2>\n<ul>\n<li>We can set the width and the height of element using two properties: <code>width</code> and <code>height</code></li>\n<li>the values of <code>width</code> and <code>height</code> are in the form of a number followed by a measure unit</li>\n<li>e.g:\n<ul>\n<li><code>width: 15px;</code>: a width of 15 pixels</li>\n<li><code>width: 50%;</code>: a width of 50% of the parent element</li>\n<li><code>height: 100%</code>: a height equal to the height of the parent element</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"position-top-bottom-left-and-right\"><code>position</code>, <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code></h2>\n<ul>\n<li>We can set the position of an element using the <code>position</code> property</li>\n<li>by default, all elements have <code>position: static</code></li>\n<li>We can change the position relative to the default position like this:\n<pre><code class=\"language-html\">&lt;div style=\"position: relative; top: 10px; left: 50px;\"&gt;\n  Some random text\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>other values of the <code>position</code> property:<iframe src=\"https://interactive-examples.mdn.mozilla.net/pages/css/position.html\" class=\"live-sample-frame example-outcome-frame\" width=\"1200\" height=\"300\" id=\"frame_position\" style=\"max-width: 100%;\" frameborder=\"0\">\n</iframe>\n</li>\n</ul>\n<hr>\n<h2 id=\"font-size\"><code>font-size</code></h2>\n<ul>\n<li>The <code>font-size</code> property sets the size of the text of the element</li>\n<li>e.g <code>font-size: 14px;</code>, <code>font-size: normal;</code>...</li>\n</ul>\n<hr>\n<h2 id=\"font-weight\"><code>font-weight</code></h2>\n<ul>\n<li>The <code>font-weight</code> property sets the boldness of the text of the element</li>\n<li>e.g <code>font-weight: normal</code>, <code>font-weight: bold</code>...</li>\n</ul>\n<hr>\n<h2 id=\"text-align\"><code>text-align</code></h2>\n<ul>\n<li>The <code>text-align</code> property sets the alignment of the text inside the element:\n<ul>\n<li><code>text-align: center;</code> centers the text</li>\n<li><code>text-align: right;</code> right-aligns the text</li>\n<li><code>text-align: left;</code> left-aligns the text</li>\n</ul>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 9,
                    "IsRead": null,
                    "Id": 12
                  },
                  {
                    "LessonId": 3,
                    "Name": "CSS values",
                    "Content": "<h1 id=\"css-values\">CSS values</h1>\n<ul>\n<li>Every CSS property is designed to accept values of certain types only. We will cover the types we need the most as well as what properties accept them.</li>\n</ul>\n<hr>\n<h2 id=\"color\">Color</h2>\n<ul>\n<li><p>A color value could be one of the following</p>\n<ul>\n<li>a predefined color name* e.g. <code>red</code>, <code>yellow</code>, <code>cyan</code></li>\n<li>a CSS color function: RGB (e.g. <code>rgb(255, 55, 80)</code>, <code>rgb(99, 0, 5)</code>), HSL (e.g. <code>hsl(0, 0, 50%)</code>, <code>hsl(12%, 15%, 89%)</code>)**</li>\n<li>a hexadicimal color representation e.g <code>#fff</code>, <code>#8569ff</code>, <code>#f0f0f0</code></li>\n</ul>\n</li>\n</ul>\n<p>* for a complete list of CSS color names, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\">this link</a></p>\n<p>** we can also represent transparent colors using the alpha channel in the <code>rgba</code> and <code>hsla</code> functions e.g. <code>rgba(0, 150, 200, 0.5)</code> <code>hsla(5%, 56%, 80%, 0.8)</code>. Notice how alpha value is always a decimal number between <code>0</code> and <code>1</code></p>\n<ul>\n<li>e.g. <code>color: red</code>, <code>background-color: rgba(255, 26, 50, 0.8)</code>, <code>border-color: #eee</code></li>\n</ul>\n<hr>\n<h2 id=\"length\">Length</h2>\n<ul>\n<li><p>The length CSS value type is used to represent dimensions and distances. It consists of a number followed by a length unit e.g. <code>50px</code>, <code>80%</code>, <code>100vh</code>. Be aware that <strong>NO whitespace is allowed between the number and the the unit</strong>.</p>\n</li>\n<li><p>The following is a list of the measure units we used often:</p>\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>a pixel on the screen. Most of the time, we'll be using this unit</td>\n</tr>\n<tr>\n<td>%</td>\n<td>a relative percentage. For length properties, the computed value is relative to the parents value***</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Say we have the following HTML code:</p>\n<pre><code class=\"language-html\">&lt;div class=\"parent-div\"&gt;\n  &lt;div class=\"child-div\"&gt;\n    &lt;p&gt;contet goes here&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;style&gt;\n  .parent-div {\n    width: 500px;\n  }\n\n  .child-div {\n    width: 50%;\n  }\n&lt;/style&gt;\n</code></pre>\n</li>\n<li><p>Then the width of the <code>.child-div</code> would be computed as <code>50% * 500px = 250px</code></p>\n</li>\n<li><p>e.g. <code>width: 250px</code>, <code>font-size: 1.2em</code>, <code>min-height: 100vh</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"url\">Url</h2>\n<ul>\n<li><p>Values of this type point to an external resource (e.g. images, fonts...). When used with a property, a URL value has to be passed inside a <code>url</code> function.</p>\n</li>\n<li><p>eg. <code>background-image: url('http://website.com/images/my-image.png')</code></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"shorthand-properties\">Shorthand properties</h2>\n<ul>\n<li>Shorthand properties give us the ability to set multiple properties using only one</li>\n</ul>\n<h3 id=\"border\"><code>border</code></h3>\n<ul>\n<li>The border property is a shorthand property used to specify the width, style and color of border of an element.</li>\n<li>syntax: <code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></li>\n<li>e.g. <code>border: 1px solid red;</code>, <code>border: 2px dashed #eee;</code>, <code>border: none</code></li>\n</ul>\n<h3 id=\"padding-and-margin\"><code>padding</code> and <code>margin</code></h3>\n<p><img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" alt=\"\"></p>\n<ul>\n<li>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space <strong>outside</strong> something, whereas padding is the space <strong>inside</strong> something.</li>\n<li>You can see the margin, padding, border, width, height and position of any element in the Chrome Dev Tools, as seen below</li>\n<li>You can change the padding or margin in different methods:</li>\n<li>When one value is specified, it applies the same padding/margin to all four sides. e.g. <code>padding: 10x;</code></li>\n<li>When two values are specified, the first padding/margin applies to the top and bottom, the second to the left and right. e.g. <code>margin: 10px 20px;</code></li>\n<li>When three values are specified, the first padding/margin applies to the top, the second to the left and right, the third to the bottom. e.g <code>padding: 10px 20px 5px;</code></li>\n<li>When four values are specified, the paddings/margins apply to the top, right, bottom, and left in that order (clockwise). e.g. <code>margin: 10px 5px 8px 9px</code></li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 12,
                    "IsRead": null,
                    "Id": 13
                  },
                  {
                    "LessonId": 3,
                    "Name": "Importing",
                    "Content": "<h2 id=\"intro\">Intro</h2>\n<ul>\n<li>We can import external CSS files, fonts and more</li>\n<li>To import another CSS file using the following syntax:\n<pre><code class=\"language-css\">@import url('buttons.css')\n</code></pre>\n</li>\n<li>We can also use the <code>@import</code> rule to add custom fonts:\n<pre><code class=\"language-css\">@import url('https://fonts.googleapis.com/css?family=Roboto');\n</code></pre>\n</li>\n<li>In reality, the google fonts service is using the <code>@font-face</code> rule\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto-Regular'), url(https://fonts.gstatic.com/s/roboto/v18/mErvLBYg_cXG3rLvUsKT_fesZW2xOQ-xsNqO47m55DA.woff2) format('woff2');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n</code></pre>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 15,
                    "IsRead": null,
                    "Id": 74
                  },
                  {
                    "LessonId": 3,
                    "Name": "Responsive design",
                    "Content": "<h2 id=\"def-responsive-web-design\">Def: Responsive web design</h2>\n<p>Responsive web design is an approach to web design which makes web pages look good on a all screen sizes.</p>\n<h2 id=\"chrome-dev-tools\">Chrome dev tools</h2>\n<ul>\n<li>During this lesson, we will use a cool feature in chrome dev tools to simulate and test different screen sizes: the \"Device toolbar\"</li>\n</ul>\n<h2 id=\"the-viewport-meta-tag\">The viewport meta tag</h2>\n<ul>\n<li>The first thing we need to do to enable our sites to become responsive is add this meta tag to the <code>head</code> of our html file\n<pre><code class=\"language-html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>\n</li>\n<li>This will enable the browser to set width of the browser equal to the width of the device when the webpage is viewed from a smartphone or a table</li>\n</ul>\n<h2 id=\"media-queries\">Media queries</h2>\n<ul>\n<li><p>Media queries are a CSS feature that allow us to change the design of our HTML pages according to the width of the screen of the device</p>\n</li>\n<li><p>For example to change the width of html elements with a class <code>.portfolio-image</code>, we can use this snippet</p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 33%;\n}\n@media (max-width: 800px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (max-width: 550px) {\n  .portfolio-project {\n    width: 100%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Or we can go the other way around and start from the small screen up. This approach is called <strong>mobile-first responsive design</strong></p>\n<pre><code class=\"language-css\">.portfolio-project {\n  width: 100%;\n}\n@media (min-width: 550px) {\n  .portfolio-project {\n    width: 50%;\n  }\n}\n@media (min-width: 800px) {\n  .portfolio-project {\n    width: 33%;\n  }\n}\n</code></pre>\n</li>\n<li><p>Notice that we can have as many CSS rulesets as we need inside one media query:</p>\n<pre><code class=\"language-css\">@media (min-width: 800px) {\n  .student-profile {\n    width: 50%;\n    font-size: 1.2em;\n  }\n  .student-list {\n    margin: 5px;\n    border-width: 2px;\n  }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"bootstrap\">Bootstrap</h2>\n<ul>\n<li>Bootstrap is a CSS library that can help us implement responsive design easily</li>\n<li>To use bootstrap for responsive design, we first have to understand the following:\n<ol>\n<li>Bootstrap uses a 12-column grid, which means that the screen is divided into 12 columns</li>\n<li>Bootstrap has a list of 5 screen sizes:</li>\n</ol>\n<ul>\n<li><code>xs</code> extra small: less than 576px</li>\n<li><code>sm</code> small: 576px - 767px</li>\n<li><code>md</code> medium: 768px - 991px</li>\n<li><code>lg</code> large: 992px - 1199px</li>\n<li><code>xl</code> extra large: greater than 1200px</li>\n</ul>\n</li>\n<li>We can combine these two pieces of information to create HTML elements with flexible width using only classes:\n<pre><code class=\"language-html\">&lt;div class=\"row\"&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n  &lt;div class=\"student-card col-sm-12 col-md-6 col-lg-4\"&gt;\n    &lt;!-- Some content goes in here --&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n<li>In this example the <code>.student-card</code> divs have a flexible width:\n<ul>\n<li>100% on small devices</li>\n<li>50% on medium devices</li>\n<li>33% on large devices</li>\n</ul>\n</li>\n<li><strong>Notice that we have to wrap all the elements in a <code>.row</code> container for bootstrap to work properly</strong></li>\n</ul>\n<h2 id=\"exercice\">Exercice</h2>\n<ul>\n<li>Implement responsive design in your personal portfolio project using bootstrap</li>\n<li>Bootstrap has also a list of ready-to-use components like headers, buttons, menus... Use some of them as well</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 18,
                    "IsRead": null,
                    "Id": 75
                  }
                ],
                "Progress": 0.0,
                "Id": 3
              },
              {
                "ModuleId": 1,
                "Name": "Project: Personal portfolio",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 9,
                "Slides": [
                  {
                    "LessonId": 4,
                    "Name": "Project: Personal portfolio",
                    "Content": "<h1 id=\"build-a-personal-portfolio-webpage\">Build a Personal Portfolio Webpage</h1>\n<p>Build a portfolio that is functionally similar to the below image.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/projects/Personal Portfolio/result_preview.png\" alt=\"\">\n</p>\n<h2 id=\"project-user-stories\">Project user stories</h2>\n<ol>\n<li><p>User story: I can access all of the portfolio webpage's content just by scrolling.</p>\n</li>\n<li><p>User story: I can click different buttons that will take me to the portfolio creator's different social media pages</p>\n</li>\n<li><p>User story: I can see thumbnail images of different projects the portfolio creator has built (if you haven't built any websites before, use placeholders.)</p>\n</li>\n<li><p>User story: I navigate to different sections of the webpage by clicking buttons in the navigation.</p>\n</li>\n</ol>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 14
                  }
                ],
                "Progress": 0.0,
                "Id": 4
              },
              {
                "ModuleId": 1,
                "Name": "Javascript",
                "Content": "<p>This module is going to introduce us to the programming language of the web and more: Javascript</p>\n",
                "SandboxUrl": "",
                "OrderIndicator": 15,
                "Slides": [
                  {
                    "LessonId": 5,
                    "Name": "CSS, the language of web design",
                    "Content": "<h1 id=\"javascript-first-steps\">JavaScript first steps</h1>\n<p>In our first JavaScript module, we first answer some fundamental questions such as:</p>\n<ul>\n<li><p>What is JavaScript?</p>\n</li>\n<li><p>What does it look like?</p>\n</li>\n<li><p>What can it do?</p>\n</li>\n</ul>\n<p>After that, we discuss some key building blocks in detail, such as variables, strings, numbers and arrays.</p>\n<h2 id=\"a-high-level-definition\">A high-level definition</h2>\n<ul>\n<li><p>JavaScript is a programming language that allows you to implement complex things on web pages.</p>\n</li>\n<li><p>Displaying timely content updates, or interactive maps, or animated 2D/3D graphics, etc -- JavaScript is probably involved.</p>\n</li>\n<li><p>It is the third layer of the layer cake of standard web technologies, two of which (<code>HTML</code> and <code>CSS</code>)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/cake.png\">\n</p>\n<ul>\n<li><p>HTML is the markup language that we use to structure and give meaning to our web content, for example:</p>\n<ul>\n<li>Defining paragraphs</li>\n<li>Defining headings</li>\n<li>Defining data tables</li>\n<li>Embedding images and videos in the page.</li>\n</ul>\n</li>\n<li><p>CSS is a language of style rules that we use to apply styling to our HTML content, for example:</p>\n<ul>\n<li>Setting background colors and fonts</li>\n<li>Laying out our content in multiple columns.</li>\n</ul>\n</li>\n<li><p>JavaScript is a programming language that enables you to create:</p>\n<ul>\n<li>Dynamically updating content</li>\n<li>Control multimedia</li>\n<li>Animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)</li>\n</ul>\n</li>\n</ul>\n<p>The three layers build on top of one another nicely. Let's take a simple text label as an example. We can mark it up using HTML to give it structure and purpose:</p>\n<pre><code class=\"language-html\">&lt;p&gt;Player 1: Sam&lt;/p&gt;\n</code></pre>\n<p><strong>Player 1: Sam</strong></p>\n<p>Then we can add some CSS into the mix to get it looking nice:</p>\n<pre><code class=\"language-css\">p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</code></pre>\n<style type=\"text/css\">\n.p {\n  font-family: 'helvetica neue', helvetica, sans-serif;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  text-align: center;\n  border: 2px solid rgba(0,0,200,0.6);\n  background: rgba(0,0,200,0.3);\n  color: rgba(0,0,200,0.6);\n  box-shadow: 1px 1px 2px rgba(0,0,200,0.4);\n  border-radius: 10px;\n  padding: 3px 10px;\n  display: inline-block;\n  cursor:pointer;\n}\n</style>\n<p class=\"p\">Player 1: Sam</p>\n<p>And finally, we can add some JavaScript to implement dynamic behaviour:</p>\n<pre><code class=\"language-javascript\">var para = document.querySelector('p');\n\npara.addEventListener('click', updateName);\n\nfunction updateName() {\n  var name = prompt('Enter a new name');\n  para.textContent = 'Player 1: ' + name;\n}\n</code></pre>\n<p>Try the <a href=\"https://codepen.io/morfioce/pen/EwdvWr\">live example</a>.</p>\n<h2 id=\"what-can-javascript-really-do\">What can JavaScript really do?</h2>\n<p>The core JavaScript language consists of some common programming features that allow you to do things like:</p>\n<ul>\n<li><p>Store useful values inside variables. In the above example for instance, we ask for a new name to be entered then store that name in a variable called <code>name</code>.</p>\n</li>\n<li><p>Operations on pieces of text (known as \"strings\" in programming). In the above example we take the string \"Player 1: \" and join it to the <code>name</code> variable to create the complete text label, e.g. <code>\"Player 1: Sam\"</code>.</p>\n</li>\n<li><p>Running code in response to certain events occurring on a web page. We used a <code>click</code> event in our example above to detect when the button is clicked and then run the code that updates the text label.</p>\n</li>\n</ul>\n<p>And much more!</p>\n<p>What is even more exciting however is the functionality built on top of the core JavaScript language. So-called <strong>Application Programming Interfaces (APIs)</strong> provide you with extra superpowers to use in your JavaScript code.</p>\n<ul>\n<li><p>APIs are ready-made sets of code building blocks that allow a developer to implement programs that would otherwise be hard or impossible to implement.</p>\n</li>\n<li><p>They do the same thing for programming that ready-made furniture kits do for home building</p>\n</li>\n</ul>\n<p>They generally fall into two categories.</p>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/browser.png\">\n</p>\n<p><strong>Browser APIs</strong> are built into your web browser, for example:</p>\n<ul>\n<li><p>The DOM (Document Object Model) API allows you to manipulate HTML and CSS, creating, removing and changing HTML, dynamically applying new styles to your page, etc.</p>\n</li>\n<li><p>The Geolocation API retrieves geographical information. This is how Google Maps is able to find your location, and plot it on a map.</p>\n</li>\n<li><p>The Canvas and WebGL APIs allow you to create animated 2D and 3D graphics.</p>\n</li>\n<li><p>Audio and Video APIs like HTMLMediaElement and WebRTC allow you to do really interesting things with multimedia, such as play audio and video right in a web page.</p>\n</li>\n</ul>\n<p><strong>Third party APIs</strong> are not built into the browser by default, for example:</p>\n<ul>\n<li><p>The <a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> allows you to do things like displaying your latest tweets on your website.</p>\n</li>\n<li><p>The <a href=\"https://developers.google.com/maps/\">Google Maps API</a> allows you to embed custom maps into your website, and other such functionality.</p>\n</li>\n</ul>\n<blockquote>\n<p>There's a lot more available, too! However, don't get over excited just yet. You won't be able to build the next Facebook, Google Maps or Instagram after studying JavaScript for 24 hours — there's a lot of basics to cover first. And that's why you're here — let's move on!</p>\n</blockquote>\n<h2 id=\"what-is-javascript-doing-on-your-page\">What is JavaScript doing on your page?</h2>\n<p>what happens when you load a web page in a browser:</p>\n<ul>\n<li><p>Fisrst you load a web page (HTML, css, javascript, images, fonts, etc) in your browser.</p>\n</li>\n<li><p>The browser runs your code (the HTML, CSS, and JavaScript) inside an execution environment (the browser tab)</p>\n</li>\n</ul>\n<p align=\"center\">\n\t<img src=\"/content/fullstack-course/05 Javascript/images/execution.png\">\n</p>\n<ul>\n<li><p>The JavaScript is executed by the browser's JavaScript engine, after the HTML and CSS have been assembled and put together into a web page.</p>\n</li>\n<li><p>This ensures that the structure and style of the page are already in place by the time the JavaScript starts to run.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good thing, as a very common use of JavaScript is to dynamically modify HTML and CSS to update a user interface, via the Document Object Model API (as mentioned above).</p>\n</blockquote>\n<p><strong>Browser security</strong></p>\n<ul>\n<li><p>Each browser tab is its own separate bucket for running code in (these buckets are called \"execution environments\" in technical terms)</p>\n</li>\n<li><p>In most cases the code in each tab is run completely separately, and the code in one tab cannot directly affect the code in another tab — or on another website.</p>\n</li>\n</ul>\n<blockquote>\n<p>This is a good security measure — if this were not the case, then pirates could start writing code to steal information from other websites, and other such bad things.</p>\n</blockquote>\n<p><strong>Server-side versus client-side code</strong></p>\n<ul>\n<li><p><strong>Client-side code</strong> is code that is run on the user's computer — when a web page is viewed, the page's client-side code is downloaded, then run and displayed by the browser.</p>\n</li>\n<li><p><strong>Server-side code</strong> on the other hand is run on the server, then its results are downloaded and displayed in the browser. Examples of popular server-side web languages include PHP, Python, Ruby, and ASP.NET. And JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment</p>\n</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 15
                  }
                ],
                "Progress": 0.0,
                "Id": 5
              },
              {
                "ModuleId": 1,
                "Name": "Web dev basics",
                "Content": "",
                "SandboxUrl": "",
                "OrderIndicator": 12,
                "Slides": [
                  {
                    "LessonId": 25,
                    "Name": "Intro to programming",
                    "Content": "<h2 id=\"intro-to-programming\">Intro to programming</h2>\n<h3 id=\"def-programming\">Def: programming</h3>\n<p>Programming is process of writing computer programs to solve problems.</p>\n<h3 id=\"def-problem\">Def: problem</h3>\n<p>In the programming context, a problem could be as simple as adding two number together or as complex as driving a car.</p>\n<p>During this course, we'll be learning how to solve very basic problems and as time goes by we will be able to solve bigger and bigger problems.</p>\n<hr>\n<h3 id=\"def-program\">Def: program</h3>\n<ul>\n<li>a list of orders for the computer</li>\n<li>the orders we give to the computer are called statements, e.g <code>alert('bonjour, chui dacc')</code></li>\n<li>the computer executes the instructions one after the other</li>\n<li>before the computer start to run the program, it makes sure there is no unknown words in the program. If there are unknown words, the computer does not run the program.</li>\n<li>we write a program in a text file using a language that the computer can understand. In our case, this language will be Javascript.</li>\n</ul>\n<hr>\n<h3 id=\"programming-languages\">Programming languages</h3>\n<p>It is important to understand that for every type of problem, there one or two programming language that is best-suited to solve it. In our case, we chose javascript because it has evolved from a language only a browser can run into a multi-purpose language.</p>\n<hr>\n<h3 id=\"hello-world\">Hello world</h3>\n<ul>\n<li>write the following in a text file\n<pre><code class=\"language-html\">&lt;script&gt;\n  alert('Hello worlds')\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>open the file in a browser, e.g. Google Chrome</li>\n<li>this file contains one instruction to the browser</li>\n<li>the function <code>alert</code> shows a message on the browser</li>\n<li>you can find help on any instruction online, for the <code>alert</code> function, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">this link</a></li>\n</ul>\n<hr>\n<h3 id=\"def-statement\">Def: statement</h3>\n<p>A statement is  group of words, numbers, and operators that performs a specific task. In the previous <code>alert('Hello worlds')</code> is a statement to the computer to show the message <code>Hello worlds</code> on the browser.</p>\n<h3 id=\"def-expression\">Def: expression</h3>\n<p>Statement are made up of one or more expression. For instance, let's say we have a variable <code>a = 5</code>, in the following expression:</p>\n<pre><code class=\"language-javascript\">alert(a + 22)\n</code></pre>\n<ul>\n<li><code>22</code> is literal value expression</li>\n<li><code>a</code> is a variable expression, which means to replace it with its current value <code>5</code></li>\n<li><code>a + 22</code> is an arithmetic expression that gets replaced by <code>5 + 22</code> and then replaced again by <code>27</code></li>\n<li>so eventually, this statement is equivalent to <code>alert(27)</code></li>\n<li>the browser will evaluate all the expressions and show <code>27</code> in a message</li>\n</ul>\n<hr>\n<h3 id=\"def-data\">Def: data</h3>\n<ul>\n<li>in computer science, data is information. e.g. the age of person, the address of a coffeshop, the number your friends on facebook, the list of your friends on facebook...</li>\n<li>every program we'll write will manipulate some data. e.g.</li>\n<li>we can order the computer to save data for us in the computer memory.</li>\n</ul>\n<hr>\n<h3 id=\"def-computer-memory\">Def: computer memory</h3>\n<ul>\n<li>just like human beings, computers have two types of memory\n<ul>\n<li>a short-term memory: RAM; holds the data for running programs. Once the computer is shut down, all data in the RAM is lost.</li>\n<li>a long-term memory: Disk memory; permanent data is stored in the hard disk of the computer in the form of files. e.g. a <code>.doc</code> file holds text data, an <code>.mp3</code> file holds audio data...</li>\n</ul>\n</li>\n<li>for the time being, we're only concerned with the short-term memory (RAM)</li>\n<li>the memory of the computer is huge table with billions of cells.</li>\n<li>the computer saves data inside its memory.</li>\n<li>we can instruct the computer to save a piece of data to be used later.</li>\n</ul>\n<hr>\n<h3 id=\"def-variable\">Def: variable</h3>\n<ul>\n<li>to save a piece of data in the memory, we use variables.</li>\n<li>a variable is a cell in the computer memory that is identified by a name and that holds one piece of data. e.g. a school address is store inside a variable <code>address</code> or <code>school_address</code> or <code>addr</code>...</li>\n<li>to instruct the browser to reserve a new cell in the computer memory and, we use the word <code>var</code></li>\n<li>we can put a piece of data inside a variable using the <code>=</code>\n<pre><code class=\"language-javascript\">var address = \"Les Berges du Lac\"\n</code></pre>\n</li>\n</ul>\n<hr>\n<h3 id=\"using-variables\">Using variables</h3>\n<pre><code class=\"language-javascript\">var name = \"Mario\"\nalert(\"go ahead \" + name)\n</code></pre>\n<p>In this example, we order the browser to do two things:</p>\n<ul>\n<li>create a new variable <code>name</code> and save the word <code>mario</code> inside it</li>\n<li>show a message <code>go ahead Mario</code> on the screen</li>\n</ul>\n<hr>\n<h3 id=\"variable-input\">Variable input</h3>\n<p>We can instruct the browser to get a certain piece of information from the user with the help of <code>prompt</code> function.</p>\n<pre><code class=\"language-javascript\">var name = prompt('Who are you ?')\nalert(\"Greeting, \" + name)\n</code></pre>\n<hr>\n<h3 id=\"data-types\">Data types</h3>\n<p>Unlike math in which we only operate on numbers, computers have to deal with different kinds of data. e.g. a person's name is a text, a car's license number is a number, a birthday date is a date (how clever!)...</p>\n<p>In javascript, three types of data are essential to build programs:</p>\n<ul>\n<li>String: to store text, e.g. <code>\"Mario\"</code>, <code>\"28 Days Later\"</code>, <code>'Tunisia'</code>, <code>'+216 86 586 320'</code>. As you can see, all strings are written inside <code>\"\"</code> or <code>''</code></li>\n<li>Number: to save numerical data, we use numbers. e.g. <code>32</code>, <code>-55</code>, <code>13.70</code>, <code>0</code></li>\n<li>Boolean: some data is boolean in nature, i.e. it is either true or false. For instance, we can store whether or not a user is an admin in a variable called <code>is_admin</code> and it can have two values: <code>true</code> or <code>false</code>\n<pre><code class=\"language-javascript\">var is_admin = false\n</code></pre>\n</li>\n</ul>\n<p>Just like its name suggest, the data inside a variable can be changed during the program using the <code>=</code> operator. Try this:</p>\n<pre><code class=\"language-javascript\">var message = \"hello\"\nalert(message)\nmessage = \"hello again\"\nalert(message)\n</code></pre>\n<hr>\n<h3 id=\"def-operator\">Def: Operator</h3>\n<p>An operator is a symbol that tells the browser to perform a specif function on some data. e.g. in the expression <code>3 + 6</code>, the <code>+</code> operator signifies to the browser to perform an addition to <code>3</code> and <code>6</code>.</p>\n<p>There are various types of operators, here are some of them:</p>\n<table>\n  <tbody><tr>\n    <td>Type</td>\n    <td>Examples</td>\n  </tr>\n  <tr>\n    <td>Mathematical operators</td>\n    <td>\n      <li>Addition (+)</li>\n      <li>Substraction (-)</li>\n      <li>Multiplication (*)</li> <!--*-->\n      <li>Division (/)</li>\n      <li>Remainder (%)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>Comparison operators</td>\n    <td>\n      <li>Equal (==)</li>\n      <li>Not equal (!=)</li>\n      <li>Strictly equal (===)</li>\n      <li>Strict not equal (!==)</li>\n      <li>Greater than (&gt;)</li>\n      <li>Greater than or equal (&gt;=)</li>\n      <li>Greater than (&lt;)</li>\n      <li>Greater than or equal(&lt;=)</li>\n    </td>\n  </tr>\n  <tr>\n    <td>String operators</td>\n    <td>\n      <li>Concatenation (+)</li>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h3 id=\"exercice\">Exercice</h3>\n<p>Write a program that:</p>\n<ul>\n<li>asks the user for one variable a</li>\n<li>asks the user for one variable b</li>\n<li>calculates the sum of a and b and save it in a variable s</li>\n<li>show the result to the user</li>\n</ul>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 0,
                    "IsRead": null,
                    "Id": 76
                  },
                  {
                    "LessonId": 25,
                    "Name": "Intro to web development",
                    "Content": "<h1 id=\"intro-to-web-development\">Intro to web development</h1>\n<h3 id=\"def-web-development\">def: Web development</h3>\n<ul>\n<li>web development is the process of creating websites and applications that work on the Internet.</li>\n<li>every website you have ever visited had to be created by web developers</li>\n<li>web development can be divided into 3 components:\n<ul>\n<li>client-side coding</li>\n<li>server-side coding</li>\n<li>database manipulation</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"why-web-development\">Why web development ?</h3>\n<p><a href=\"https://codepen.io/andrewatts85/post/top-10-reasons-to-learn-web-development\">[article] 10 Reasons To Learn Web Development\n</a></p>\n<hr>\n<h3 id=\"def-web\">def: Web</h3>\n<p>The web is a huge system of Internet servers that host documents (called webpages) written in a markup language called HTML. These documents support many types of content (text, image, audio...) as well as links to other webpages.</p>\n<hr>\n<h3 id=\"def-client-side\">def: client side</h3>\n<p>The client side, aka the front tend, is what the end-user sees. In the case of restaurant for example: the service, the decoration, the menu, and the food are what represent the front end for the customer.</p>\n<hr>\n<h3 id=\"def-server-side\">def: server side</h3>\n<p>The server side, aka the back end, is the part of a program that the user does not see. Just like in a restaurant, most of the work happens in the back end.</p>\n<hr>\n<h3 id=\"def-database\">def: database</h3>\n<p>A database can be represented as a huge table in which data is stored. We usually use a database to permanently store information in the hard disk.</p>\n",
                    "SandboxUrl": "",
                    "OrderIndicator": 3,
                    "IsRead": null,
                    "Id": 77
                  }
                ],
                "Progress": 0.0,
                "Id": 25
              }
            ],
            "Id": 1
          },
          {
            "SubTrackId": 13,
            "Name": "Power Up",
            "Color": "#2ecc71",
            "OrderIndicator": 3,
            "Lessons": [],
            "Id": 2
          }
        ],
        "MigrationVersion": 4,
        "ProductTemplateId": 19,
        "Locked": false,
        "Id": 13
      },
      "Name": "Launch",
      "Color": "#3498db",
      "OrderIndicator": 6,
      "Lessons": [],
      "Id": 3
    }
  ]
}